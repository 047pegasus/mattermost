#!/usr/bin/env groovy

@Library('shared-pipelines') _
import org.mattermost.Utils
import java.util.*;
def utils = new org.mattermost.Utils()
def build = new org.mattermost.BuildCommands()
def platformStages = new org.mattermost.PlatformStages()

def rndEETest = UUID.randomUUID().toString()
def rndEEProd = UUID.randomUUID().toString()
def mmBuilderServer = 'mattermost/mattermost-build-server:20200731_golang-1.14.6'
def mmBuilderWebapp = 'mattermost/mattermost-build-webapp:oct-2-2018'

pipeline {
  agent {
    label 'default-mm-builder'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    timeout(time: 2, unit: 'HOURS')
  }

  environment {
    COMPOSE_PROJECT_NAME="${rnd}-${env.BUILD_NUMBER}"
    GOPATH = "/go"
  }

  stages {
    stage('Setup') {
      steps {
        script {
          platformStages.platformEcho()
        }
      }
    }

    stage('Build') {
      failFast true
      parallel {
        stage ('Build EE with test keys') {
          agent {
            label 'default-mm-builder'
          }
          steps {
            script {
              forcefullyCleanWorkspace(mmBuilderServer)
              platformStages.platformCheckoutTE(env.BRANCH_NAME)
              platformStages.platformCheckoutEE(env.BRANCH_NAME)
              platformStages.platformCheckoutRedux(env.BRANCH_NAME)
              platformStages.platformCheckoutEEGOSaml('release-5.x')
              platformStages.platformCheckoutEEGOXML('release-5.x')
              platformStages.platformCheckoutEEGOXMLDsig('release-5.x')
              SERVER_GIT_COMMIT=platformStages.platformServerCommitHash()
              try {
                platformStages.cloudGAWithRudderBuild(env.BRANCH_NAME + '.' + env.BUILD_NUMBER + '.' + SERVER_GIT_COMMIT, rndEETest, false, mmBuilderServer, mmBuilderWebapp)
              } finally {
                platformStages.platformPublishResults()
                platformStages.platformCleanDockerCompose(rndEETest)
              }
            }
            stash includes: 'src/github.com/mattermost/mattermost-server/dist/**', name: 'eetestdist'
          }
        }
        stage ('Build EE with prod keys') {
          agent {
            label 'default-mm-builder'
          }
          steps {
            script {
              forcefullyCleanWorkspace(mmBuilderServer)
              platformStages.platformCheckoutTE(env.BRANCH_NAME)
              platformStages.platformCheckoutEE(env.BRANCH_NAME)
              platformStages.platformCheckoutRedux(env.BRANCH_NAME)
              SERVER_GIT_COMMIT=platformStages.platformServerCommitHash()
              try {
                platformStages.cloudGAWithRudderBuild(env.BRANCH_NAME + '.' + env.BUILD_NUMBER + '.' + SERVER_GIT_COMMIT, rndEEProd, true, mmBuilderServer, mmBuilderWebapp)
              } finally {
                platformStages.platformPublishResults()
                platformStages.platformCleanDockerCompose(rndEEProd)
              }
            }
            stash includes: 'src/github.com/mattermost/mattermost-server/dist/**', name: 'eeproddist'
          }
        }
      }
    }

    stage ('Push EE with test keys') {
      steps {
        node('master') {
          forcefullyCleanWorkspace(mmBuilderServer)
          unstash 'eetestdist'
          script {
            platformStages.pushToS3('mattermost-platform/' + env.BRANCH_NAME + '/test', 'mattermost-enterprise-*',false)
          }
        }
      }
    }
    stage ('Push EE with prod keys') {
      steps {
        node('master') {
          forcefullyCleanWorkspace(mmBuilderServer)
          unstash 'eeproddist'
          script {
            platformStages.pushToS3('mattermost-platform/' + env.BRANCH_NAME + '/prod', 'mattermost-enterprise-*',false)
          }
        }
      }
    }
    stage ('CleanCloudfront') {
      steps {
        node('master') {
          script {
            platformStages.cleanCloudfrontCache('mattermost-platform/' + env.BRANCH_NAME)
          }
        }
      }
    }

    stage ('Build Docker Images Cloud') {
      agent {
        label 'default-mm-builder'
      }
      steps {
        script {
          forcefullyCleanWorkspace(mmBuilderServer)
          platformStages.platformCheckoutTE(env.BRANCH_NAME)
        }
        dir('src/github.com/mattermost/mattermost-server') {
          withCredentials([usernamePassword(credentialsId: 'matterbuild-docker-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
            sh 'docker login --username ${DOCKER_USER} --password ${DOCKER_PASS}'
            sh """
            export TAG=\$(git rev-parse --short=7 HEAD)-${env.BUILD_NUMBER}
            docker build --no-cache --build-arg MM_PACKAGE=https://releases.mattermost.com/mattermost-platform/${env.BRANCH_NAME}/test/mattermost-enterprise-linux-amd64.tar.gz -t mattermost/mm-cloud-ee:test-\${TAG} build
            docker push mattermost/mm-cloud-ee:test-\${TAG}
            """
            sh """
            export TAG=\$(git rev-parse --short=7 HEAD)-${env.BUILD_NUMBER}
            docker build --no-cache --build-arg MM_PACKAGE=https://releases.mattermost.com/mattermost-platform/${env.BRANCH_NAME}/prod/mattermost-enterprise-linux-amd64.tar.gz -t mattermost/mm-cloud-ee:prod-\${TAG} build
            docker push mattermost/mm-cloud-ee:prod-\${TAG}
            docker logout
            """
          }
        }
      }
    }
  }

  post {
    cleanup {
      forcefullyCleanWorkspace(mmBuilderServer)
    }
  }
}


def forcefullyCleanWorkspace(String imageToUse) {
  return withDockerContainer(
    image: imageToUse,
    args: '-u root'
  ) {
    ansiColor('xterm') {
      sh """#!/bin/bash -e
        if [ -d "\$WORKSPACE" ]
        then
          rm -rfv \$WORKSPACE/*
        fi
      """
    }
  }
}
