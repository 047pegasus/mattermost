stages:
  - test
  - build
  - publish
  - create-vars
  - trigger-build-ee

include:
  - project: mattermost/ci/mattermost-server
    ref: master
    file: private.yml
#  - local: .gitlab-ci/test.yml

variables:
  BUILD: "yes"
  TEST: "no"

empty:
  stage: create-vars
  script:
    - echo "empty"

#lint:
#  image: $CI_REGISTRY/mattermost/ci/images/golangci-lint:v1.38.0
#  stage: .pre
#  script:
#    - GO111MODULE=off GOBIN=$PWD/bin go get -u github.com/mattermost/mattermost-govet
#    - make config-reset
#    - make check-style #todo MM_VET_OPENSPEC_PATH='$CI_PROJECT_DIR/mattermost-api-reference/v4/html/static/mattermost-openapi-v4.yaml'
#  timeout: 60 mins
#  rules:
#    - if: '$TEST == "yes"'
#
#layers:
#  image: $CI_REGISTRY/mattermost/ci/images/mattermost-build-server:20201119_golang-1.15.5
#  stage: .pre
#  script:
#    - make store-layers
#    - if [[ -n $(git status --porcelain) ]]; then echo "Please update the store layers using make store-layers"; exit 1; fi
#    - git reset --hard
#    - make app-layers
#    - if [[ -n $(git status --porcelain) ]]; then echo "Please update the app layers using make app-layers"; exit 1; fi
#    - git reset --hard
#  rules:
#    - if: '$TEST == "yes"'
#
#test-postgres:
#  extends: .test
#  tags:
#    - docker
#  variables:
#    MM_SQLSETTINGS_DATASOURCE: "postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10"
#    MM_SQLSETTINGS_DRIVERNAME: postgres
#  rules:
#    - if: '$TEST == "yes"'
#
#test-mysql:
#  extends: .test
#  tags:
#    - docker
#  variables:
#    MM_SQLSETTINGS_DATASOURCE: "mmuser:mostest@tcp(mysql:3306)/mattermost_test?charset=utf8mb4,utf8&multiStatements=true"
#    MM_SQLSETTINGS_DRIVERNAME: mysql
#  rules:
#    - if: '$TEST == "yes"'
#
test-schema-mysql:
  stage: test
  image: $CI_REGISTRY/mattermost/ci/images/mattermost-build-docker:19.03.14-1
#  services:
#    - name: $CI_REGISTRY/mattermost/ci/images/docker-dind:19.03.14-1
#      alias: docker
#  variables:
#    DOCKER_TLS_CERTDIR: ""
#    DOCKER_HOST: tcp://docker:2375
#    DOCKER_DRIVER: overlay2
#    DOCKER_CONTENT_TRUST: 0
#    DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: ""

    # https://docs.gitlab.com/runner/executors/kubernetes.html#overwriting-container-resources
#    KUBERNETES_CPU_REQUEST: 500m
#    KUBERNETES_CPU_LIMIT: 3
#    KUBERNETES_MEMORY_REQUEST: 5Gi
#    KUBERNETES_MEMORY_LIMIT: 7Gi
#    KUBERNETES_HELPER_CPU_REQUEST: 100m
#    KUBERNETES_HELPER_CPU_LIMIT: 200m
#    KUBERNETES_HELPER_MEMORY_REQUEST: 50Mi
#    KUBERNETES_HELPER_MEMORY_LIMIT: 100Mi
#    KUBERNETES_SERVICE_CPU_REQUEST: 500m
#    KUBERNETES_SERVICE_CPU_LIMIT: 3
#    KUBERNETES_SERVICE_MEMORY_REQUEST: 5Gi
#    KUBERNETES_SERVICE_MEMORY_LIMIT: 7Gi
  before_script:
    - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME docker.io --password-stdin
  script:
    - export COMPOSE_PROJECT_NAME="${CI_PIPELINE_IID}schemamysql"
    - cat .gitlab-ci/scripts/test-schema/mysql.sh | /bin/bash
  after_script:
    - docker logout
  tags:
    - machine-docker

test-schema-postgres:
  stage: test
  image: $CI_REGISTRY/mattermost/ci/images/mattermost-build-docker:19.03.14-1
#  services:
#    - name: $CI_REGISTRY/mattermost/ci/images/docker-dind:19.03.14-1
#      alias: docker
#  variables:
#    DOCKER_TLS_CERTDIR: ""
#    DOCKER_HOST: tcp://docker:2375
#    DOCKER_DRIVER: overlay2
#    DOCKER_CONTENT_TRUST: 0
#    DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: ""

    # https://docs.gitlab.com/runner/executors/kubernetes.html#overwriting-container-resources
#    KUBERNETES_CPU_REQUEST: 500m
#    KUBERNETES_CPU_LIMIT: 3
#    KUBERNETES_MEMORY_REQUEST: 5Gi
#    KUBERNETES_MEMORY_LIMIT: 7Gi
#    KUBERNETES_HELPER_CPU_REQUEST: 100m
#    KUBERNETES_HELPER_CPU_LIMIT: 200m
#    KUBERNETES_HELPER_MEMORY_REQUEST: 50Mi
#    KUBERNETES_HELPER_MEMORY_LIMIT: 100Mi
#    KUBERNETES_SERVICE_CPU_REQUEST: 500m
#    KUBERNETES_SERVICE_CPU_LIMIT: 3
#    KUBERNETES_SERVICE_MEMORY_REQUEST: 5Gi
#    KUBERNETES_SERVICE_MEMORY_LIMIT: 7Gi
  before_script:
    - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME docker.io --password-stdin
  script:
    - export COMPOSE_PROJECT_NAME="${CI_PIPELINE_IID}schemapostgres"
    - cat .gitlab-ci/scripts/test-schema/postgres.sh | /bin/bash
  after_script:
    - docker logout
  tags:
    - machine-docker
