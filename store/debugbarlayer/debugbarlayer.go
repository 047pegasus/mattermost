// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by "make store-layers"
// DO NOT EDIT

package debugbarlayer

import (
	"context"
	"time"
	//"fmt"

	"github.com/mattermost/mattermost-server/v6/model"
	"github.com/mattermost/mattermost-server/v6/store"
)

type DebugBarLayer struct {
	store.Store
	userID                    string
	eventPublish              func(event *model.WebSocketEvent)
	AuditStore                store.AuditStore
	BotStore                  store.BotStore
	ChannelStore              store.ChannelStore
	ChannelMemberHistoryStore store.ChannelMemberHistoryStore
	ClusterDiscoveryStore     store.ClusterDiscoveryStore
	CommandStore              store.CommandStore
	CommandWebhookStore       store.CommandWebhookStore
	ComplianceStore           store.ComplianceStore
	DraftStore                store.DraftStore
	EmojiStore                store.EmojiStore
	FileInfoStore             store.FileInfoStore
	GroupStore                store.GroupStore
	JobStore                  store.JobStore
	LicenseStore              store.LicenseStore
	LinkMetadataStore         store.LinkMetadataStore
	NotifyAdminStore          store.NotifyAdminStore
	OAuthStore                store.OAuthStore
	PluginStore               store.PluginStore
	PostStore                 store.PostStore
	PostAcknowledgementStore  store.PostAcknowledgementStore
	PostPriorityStore         store.PostPriorityStore
	PreferenceStore           store.PreferenceStore
	ProductNoticesStore       store.ProductNoticesStore
	ReactionStore             store.ReactionStore
	RemoteClusterStore        store.RemoteClusterStore
	RetentionPolicyStore      store.RetentionPolicyStore
	RoleStore                 store.RoleStore
	SchemeStore               store.SchemeStore
	SessionStore              store.SessionStore
	SharedChannelStore        store.SharedChannelStore
	StatusStore               store.StatusStore
	SystemStore               store.SystemStore
	TeamStore                 store.TeamStore
	TermsOfServiceStore       store.TermsOfServiceStore
	ThreadStore               store.ThreadStore
	TokenStore                store.TokenStore
	TrueUpReviewStore         store.TrueUpReviewStore
	UploadSessionStore        store.UploadSessionStore
	UserStore                 store.UserStore
	UserAccessTokenStore      store.UserAccessTokenStore
	UserTermsOfServiceStore   store.UserTermsOfServiceStore
	WebhookStore              store.WebhookStore
}

func (s *DebugBarLayer) Audit() store.AuditStore {
	return s.AuditStore
}

func (s *DebugBarLayer) Bot() store.BotStore {
	return s.BotStore
}

func (s *DebugBarLayer) Channel() store.ChannelStore {
	return s.ChannelStore
}

func (s *DebugBarLayer) ChannelMemberHistory() store.ChannelMemberHistoryStore {
	return s.ChannelMemberHistoryStore
}

func (s *DebugBarLayer) ClusterDiscovery() store.ClusterDiscoveryStore {
	return s.ClusterDiscoveryStore
}

func (s *DebugBarLayer) Command() store.CommandStore {
	return s.CommandStore
}

func (s *DebugBarLayer) CommandWebhook() store.CommandWebhookStore {
	return s.CommandWebhookStore
}

func (s *DebugBarLayer) Compliance() store.ComplianceStore {
	return s.ComplianceStore
}

func (s *DebugBarLayer) Draft() store.DraftStore {
	return s.DraftStore
}

func (s *DebugBarLayer) Emoji() store.EmojiStore {
	return s.EmojiStore
}

func (s *DebugBarLayer) FileInfo() store.FileInfoStore {
	return s.FileInfoStore
}

func (s *DebugBarLayer) Group() store.GroupStore {
	return s.GroupStore
}

func (s *DebugBarLayer) Job() store.JobStore {
	return s.JobStore
}

func (s *DebugBarLayer) License() store.LicenseStore {
	return s.LicenseStore
}

func (s *DebugBarLayer) LinkMetadata() store.LinkMetadataStore {
	return s.LinkMetadataStore
}

func (s *DebugBarLayer) NotifyAdmin() store.NotifyAdminStore {
	return s.NotifyAdminStore
}

func (s *DebugBarLayer) OAuth() store.OAuthStore {
	return s.OAuthStore
}

func (s *DebugBarLayer) Plugin() store.PluginStore {
	return s.PluginStore
}

func (s *DebugBarLayer) Post() store.PostStore {
	return s.PostStore
}

func (s *DebugBarLayer) PostAcknowledgement() store.PostAcknowledgementStore {
	return s.PostAcknowledgementStore
}

func (s *DebugBarLayer) PostPriority() store.PostPriorityStore {
	return s.PostPriorityStore
}

func (s *DebugBarLayer) Preference() store.PreferenceStore {
	return s.PreferenceStore
}

func (s *DebugBarLayer) ProductNotices() store.ProductNoticesStore {
	return s.ProductNoticesStore
}

func (s *DebugBarLayer) Reaction() store.ReactionStore {
	return s.ReactionStore
}

func (s *DebugBarLayer) RemoteCluster() store.RemoteClusterStore {
	return s.RemoteClusterStore
}

func (s *DebugBarLayer) RetentionPolicy() store.RetentionPolicyStore {
	return s.RetentionPolicyStore
}

func (s *DebugBarLayer) Role() store.RoleStore {
	return s.RoleStore
}

func (s *DebugBarLayer) Scheme() store.SchemeStore {
	return s.SchemeStore
}

func (s *DebugBarLayer) Session() store.SessionStore {
	return s.SessionStore
}

func (s *DebugBarLayer) SharedChannel() store.SharedChannelStore {
	return s.SharedChannelStore
}

func (s *DebugBarLayer) Status() store.StatusStore {
	return s.StatusStore
}

func (s *DebugBarLayer) System() store.SystemStore {
	return s.SystemStore
}

func (s *DebugBarLayer) Team() store.TeamStore {
	return s.TeamStore
}

func (s *DebugBarLayer) TermsOfService() store.TermsOfServiceStore {
	return s.TermsOfServiceStore
}

func (s *DebugBarLayer) Thread() store.ThreadStore {
	return s.ThreadStore
}

func (s *DebugBarLayer) Token() store.TokenStore {
	return s.TokenStore
}

func (s *DebugBarLayer) TrueUpReview() store.TrueUpReviewStore {
	return s.TrueUpReviewStore
}

func (s *DebugBarLayer) UploadSession() store.UploadSessionStore {
	return s.UploadSessionStore
}

func (s *DebugBarLayer) User() store.UserStore {
	return s.UserStore
}

func (s *DebugBarLayer) UserAccessToken() store.UserAccessTokenStore {
	return s.UserAccessTokenStore
}

func (s *DebugBarLayer) UserTermsOfService() store.UserTermsOfServiceStore {
	return s.UserTermsOfServiceStore
}

func (s *DebugBarLayer) Webhook() store.WebhookStore {
	return s.WebhookStore
}

type DebugBarLayerAuditStore struct {
	store.AuditStore
	Root *DebugBarLayer
}

type DebugBarLayerBotStore struct {
	store.BotStore
	Root *DebugBarLayer
}

type DebugBarLayerChannelStore struct {
	store.ChannelStore
	Root *DebugBarLayer
}

type DebugBarLayerChannelMemberHistoryStore struct {
	store.ChannelMemberHistoryStore
	Root *DebugBarLayer
}

type DebugBarLayerClusterDiscoveryStore struct {
	store.ClusterDiscoveryStore
	Root *DebugBarLayer
}

type DebugBarLayerCommandStore struct {
	store.CommandStore
	Root *DebugBarLayer
}

type DebugBarLayerCommandWebhookStore struct {
	store.CommandWebhookStore
	Root *DebugBarLayer
}

type DebugBarLayerComplianceStore struct {
	store.ComplianceStore
	Root *DebugBarLayer
}

type DebugBarLayerDraftStore struct {
	store.DraftStore
	Root *DebugBarLayer
}

type DebugBarLayerEmojiStore struct {
	store.EmojiStore
	Root *DebugBarLayer
}

type DebugBarLayerFileInfoStore struct {
	store.FileInfoStore
	Root *DebugBarLayer
}

type DebugBarLayerGroupStore struct {
	store.GroupStore
	Root *DebugBarLayer
}

type DebugBarLayerJobStore struct {
	store.JobStore
	Root *DebugBarLayer
}

type DebugBarLayerLicenseStore struct {
	store.LicenseStore
	Root *DebugBarLayer
}

type DebugBarLayerLinkMetadataStore struct {
	store.LinkMetadataStore
	Root *DebugBarLayer
}

type DebugBarLayerNotifyAdminStore struct {
	store.NotifyAdminStore
	Root *DebugBarLayer
}

type DebugBarLayerOAuthStore struct {
	store.OAuthStore
	Root *DebugBarLayer
}

type DebugBarLayerPluginStore struct {
	store.PluginStore
	Root *DebugBarLayer
}

type DebugBarLayerPostStore struct {
	store.PostStore
	Root *DebugBarLayer
}

type DebugBarLayerPostAcknowledgementStore struct {
	store.PostAcknowledgementStore
	Root *DebugBarLayer
}

type DebugBarLayerPostPriorityStore struct {
	store.PostPriorityStore
	Root *DebugBarLayer
}

type DebugBarLayerPreferenceStore struct {
	store.PreferenceStore
	Root *DebugBarLayer
}

type DebugBarLayerProductNoticesStore struct {
	store.ProductNoticesStore
	Root *DebugBarLayer
}

type DebugBarLayerReactionStore struct {
	store.ReactionStore
	Root *DebugBarLayer
}

type DebugBarLayerRemoteClusterStore struct {
	store.RemoteClusterStore
	Root *DebugBarLayer
}

type DebugBarLayerRetentionPolicyStore struct {
	store.RetentionPolicyStore
	Root *DebugBarLayer
}

type DebugBarLayerRoleStore struct {
	store.RoleStore
	Root *DebugBarLayer
}

type DebugBarLayerSchemeStore struct {
	store.SchemeStore
	Root *DebugBarLayer
}

type DebugBarLayerSessionStore struct {
	store.SessionStore
	Root *DebugBarLayer
}

type DebugBarLayerSharedChannelStore struct {
	store.SharedChannelStore
	Root *DebugBarLayer
}

type DebugBarLayerStatusStore struct {
	store.StatusStore
	Root *DebugBarLayer
}

type DebugBarLayerSystemStore struct {
	store.SystemStore
	Root *DebugBarLayer
}

type DebugBarLayerTeamStore struct {
	store.TeamStore
	Root *DebugBarLayer
}

type DebugBarLayerTermsOfServiceStore struct {
	store.TermsOfServiceStore
	Root *DebugBarLayer
}

type DebugBarLayerThreadStore struct {
	store.ThreadStore
	Root *DebugBarLayer
}

type DebugBarLayerTokenStore struct {
	store.TokenStore
	Root *DebugBarLayer
}

type DebugBarLayerTrueUpReviewStore struct {
	store.TrueUpReviewStore
	Root *DebugBarLayer
}

type DebugBarLayerUploadSessionStore struct {
	store.UploadSessionStore
	Root *DebugBarLayer
}

type DebugBarLayerUserStore struct {
	store.UserStore
	Root *DebugBarLayer
}

type DebugBarLayerUserAccessTokenStore struct {
	store.UserAccessTokenStore
	Root *DebugBarLayer
}

type DebugBarLayerUserTermsOfServiceStore struct {
	store.UserTermsOfServiceStore
	Root *DebugBarLayer
}

type DebugBarLayerWebhookStore struct {
	store.WebhookStore
	Root *DebugBarLayer
}

func (s *DebugBarLayerAuditStore) Get(user_id string, offset int, limit int) (model.Audits, error) {
	start := time.Now()

	result, err := s.AuditStore.Get(user_id, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "AuditStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{user_id, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerAuditStore) PermanentDeleteByUser(userID string) error {
	start := time.Now()

	err := s.AuditStore.PermanentDeleteByUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "AuditStore.PermanentDeleteByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerAuditStore) Save(audit *model.Audit) error {
	start := time.Now()

	err := s.AuditStore.Save(audit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "AuditStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{audit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerBotStore) Get(userID string, includeDeleted bool) (*model.Bot, error) {
	start := time.Now()

	result, err := s.BotStore.Get(userID, includeDeleted)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "BotStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, includeDeleted}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerBotStore) GetAll(options *model.BotGetOptions) ([]*model.Bot, error) {
	start := time.Now()

	result, err := s.BotStore.GetAll(options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "BotStore.GetAll")
	// event.Add("params", fmt.Sprintf("%v", []any{options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerBotStore) PermanentDelete(userID string) error {
	start := time.Now()

	err := s.BotStore.PermanentDelete(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "BotStore.PermanentDelete")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerBotStore) Save(bot *model.Bot) (*model.Bot, error) {
	start := time.Now()

	result, err := s.BotStore.Save(bot)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "BotStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{bot}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerBotStore) Update(bot *model.Bot) (*model.Bot, error) {
	start := time.Now()

	result, err := s.BotStore.Update(bot)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "BotStore.Update")
	// event.Add("params", fmt.Sprintf("%v", []any{bot}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) AnalyticsDeletedTypeCount(teamID string, channelType model.ChannelType) (int64, error) {
	start := time.Now()

	result, err := s.ChannelStore.AnalyticsDeletedTypeCount(teamID, channelType)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.AnalyticsDeletedTypeCount")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, channelType}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) AnalyticsTypeCount(teamID string, channelType model.ChannelType) (int64, error) {
	start := time.Now()

	result, err := s.ChannelStore.AnalyticsTypeCount(teamID, channelType)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.AnalyticsTypeCount")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, channelType}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) Autocomplete(userID string, term string, includeDeleted bool, isGuest bool) (model.ChannelListWithTeamData, error) {
	start := time.Now()

	result, err := s.ChannelStore.Autocomplete(userID, term, includeDeleted, isGuest)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.Autocomplete")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, term, includeDeleted, isGuest}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) AutocompleteInTeam(teamID string, userID string, term string, includeDeleted bool, isGuest bool) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.AutocompleteInTeam(teamID, userID, term, includeDeleted, isGuest)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.AutocompleteInTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID, term, includeDeleted, isGuest}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) AutocompleteInTeamForSearch(teamID string, userID string, term string, includeDeleted bool) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.AutocompleteInTeamForSearch(teamID, userID, term, includeDeleted)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.AutocompleteInTeamForSearch")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID, term, includeDeleted}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) ClearAllCustomRoleAssignments() error {
	start := time.Now()

	err := s.ChannelStore.ClearAllCustomRoleAssignments()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.ClearAllCustomRoleAssignments")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) ClearCaches() {
	start := time.Now()

	s.ChannelStore.ClearCaches()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.ClearCaches")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerChannelStore) ClearMembersForUserCache() {
	start := time.Now()

	s.ChannelStore.ClearMembersForUserCache()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.ClearMembersForUserCache")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerChannelStore) ClearSidebarOnTeamLeave(userID string, teamID string) error {
	start := time.Now()

	err := s.ChannelStore.ClearSidebarOnTeamLeave(userID, teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.ClearSidebarOnTeamLeave")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) CountPostsAfter(channelID string, timestamp int64, userID string) (int, int, error) {
	start := time.Now()

	result, resultVar1, err := s.ChannelStore.CountPostsAfter(channelID, timestamp, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.CountPostsAfter")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, timestamp, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, resultVar1, err
}

func (s *DebugBarLayerChannelStore) CountUrgentPostsAfter(channelID string, timestamp int64, userID string) (int, error) {
	start := time.Now()

	result, err := s.ChannelStore.CountUrgentPostsAfter(channelID, timestamp, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.CountUrgentPostsAfter")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, timestamp, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) CreateDirectChannel(userID *model.User, otherUserID *model.User, channelOptions ...model.ChannelOption) (*model.Channel, error) {
	start := time.Now()

	result, err := s.ChannelStore.CreateDirectChannel(userID, otherUserID, channelOptions...)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.CreateDirectChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, otherUserID, channelOptions...}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) CreateInitialSidebarCategories(userID string, opts *store.SidebarCategorySearchOpts) (*model.OrderedSidebarCategories, error) {
	start := time.Now()

	result, err := s.ChannelStore.CreateInitialSidebarCategories(userID, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.CreateInitialSidebarCategories")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) CreateSidebarCategory(userID string, teamID string, newCategory *model.SidebarCategoryWithChannels) (*model.SidebarCategoryWithChannels, error) {
	start := time.Now()

	result, err := s.ChannelStore.CreateSidebarCategory(userID, teamID, newCategory)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.CreateSidebarCategory")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamID, newCategory}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) Delete(channelID string, timestamp int64) error {
	start := time.Now()

	err := s.ChannelStore.Delete(channelID, timestamp)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, timestamp}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) DeleteSidebarCategory(categoryID string) error {
	start := time.Now()

	err := s.ChannelStore.DeleteSidebarCategory(categoryID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.DeleteSidebarCategory")
	// event.Add("params", fmt.Sprintf("%v", []any{categoryID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) DeleteSidebarChannelsByPreferences(preferences model.Preferences) error {
	start := time.Now()

	err := s.ChannelStore.DeleteSidebarChannelsByPreferences(preferences)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.DeleteSidebarChannelsByPreferences")
	// event.Add("params", fmt.Sprintf("%v", []any{preferences}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) Get(id string, allowFromCache bool) (*model.Channel, error) {
	start := time.Now()

	result, err := s.ChannelStore.Get(id, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{id, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetAll(teamID string) ([]*model.Channel, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetAll(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetAll")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetAllChannelMembersById(id string) ([]string, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetAllChannelMembersById(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetAllChannelMembersById")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetAllChannelMembersForUser(userID string, allowFromCache bool, includeDeleted bool) (map[string]string, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetAllChannelMembersForUser(userID, allowFromCache, includeDeleted)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetAllChannelMembersForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, allowFromCache, includeDeleted}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetAllChannelMembersNotifyPropsForChannel(channelID string, allowFromCache bool) (map[string]model.StringMap, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetAllChannelMembersNotifyPropsForChannel(channelID, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetAllChannelMembersNotifyPropsForChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetAllChannels(page int, perPage int, opts store.ChannelSearchOpts) (model.ChannelListWithTeamData, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetAllChannels(page, perPage, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetAllChannels")
	// event.Add("params", fmt.Sprintf("%v", []any{page, perPage, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetAllChannelsCount(opts store.ChannelSearchOpts) (int64, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetAllChannelsCount(opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetAllChannelsCount")
	// event.Add("params", fmt.Sprintf("%v", []any{opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetAllChannelsForExportAfter(limit int, afterID string) ([]*model.ChannelForExport, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetAllChannelsForExportAfter(limit, afterID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetAllChannelsForExportAfter")
	// event.Add("params", fmt.Sprintf("%v", []any{limit, afterID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetAllDirectChannelsForExportAfter(limit int, afterID string) ([]*model.DirectChannelForExport, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetAllDirectChannelsForExportAfter(limit, afterID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetAllDirectChannelsForExportAfter")
	// event.Add("params", fmt.Sprintf("%v", []any{limit, afterID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetByName(team_id string, name string, allowFromCache bool) (*model.Channel, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetByName(team_id, name, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetByName")
	// event.Add("params", fmt.Sprintf("%v", []any{team_id, name, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetByNameIncludeDeleted(team_id string, name string, allowFromCache bool) (*model.Channel, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetByNameIncludeDeleted(team_id, name, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetByNameIncludeDeleted")
	// event.Add("params", fmt.Sprintf("%v", []any{team_id, name, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetByNames(team_id string, names []string, allowFromCache bool) ([]*model.Channel, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetByNames(team_id, names, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetByNames")
	// event.Add("params", fmt.Sprintf("%v", []any{team_id, names, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetChannelCounts(teamID string, userID string) (*model.ChannelCounts, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetChannelCounts(teamID, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetChannelCounts")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetChannelMembersForExport(userID string, teamID string) ([]*model.ChannelMemberForExport, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetChannelMembersForExport(userID, teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetChannelMembersForExport")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetChannelMembersTimezones(channelID string) ([]model.StringMap, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetChannelMembersTimezones(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetChannelMembersTimezones")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetChannelUnread(channelID string, userID string) (*model.ChannelUnread, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetChannelUnread(channelID, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetChannelUnread")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetChannels(teamID string, userID string, opts *model.ChannelSearchOpts) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetChannels(teamID, userID, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetChannels")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetChannelsBatchForIndexing(startTime int64, startChannelID string, limit int) ([]*model.Channel, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetChannelsBatchForIndexing(startTime, startChannelID, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetChannelsBatchForIndexing")
	// event.Add("params", fmt.Sprintf("%v", []any{startTime, startChannelID, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetChannelsByIds(channelIds []string, includeDeleted bool) ([]*model.Channel, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetChannelsByIds(channelIds, includeDeleted)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetChannelsByIds")
	// event.Add("params", fmt.Sprintf("%v", []any{channelIds, includeDeleted}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetChannelsByScheme(schemeID string, offset int, limit int) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetChannelsByScheme(schemeID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetChannelsByScheme")
	// event.Add("params", fmt.Sprintf("%v", []any{schemeID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetChannelsByUser(userID string, includeDeleted bool, lastDeleteAt int, pageSize int, fromChannelID string) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetChannelsByUser(userID, includeDeleted, lastDeleteAt, pageSize, fromChannelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetChannelsByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, includeDeleted, lastDeleteAt, pageSize, fromChannelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetChannelsWithCursor(teamId string, userId string, opts *model.ChannelSearchOpts, afterChannelID string) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetChannelsWithCursor(teamId, userId, opts, afterChannelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetChannelsWithCursor")
	// event.Add("params", fmt.Sprintf("%v", []any{teamId, userId, opts, afterChannelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetChannelsWithTeamDataByIds(channelIds []string, includeDeleted bool) ([]*model.ChannelWithTeamData, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetChannelsWithTeamDataByIds(channelIds, includeDeleted)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetChannelsWithTeamDataByIds")
	// event.Add("params", fmt.Sprintf("%v", []any{channelIds, includeDeleted}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetDeleted(team_id string, offset int, limit int, userID string) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetDeleted(team_id, offset, limit, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetDeleted")
	// event.Add("params", fmt.Sprintf("%v", []any{team_id, offset, limit, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetDeletedByName(team_id string, name string) (*model.Channel, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetDeletedByName(team_id, name)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetDeletedByName")
	// event.Add("params", fmt.Sprintf("%v", []any{team_id, name}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetFileCount(channelID string) (int64, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetFileCount(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetFileCount")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetForPost(postID string) (*model.Channel, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetForPost(postID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetForPost")
	// event.Add("params", fmt.Sprintf("%v", []any{postID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetGuestCount(channelID string, allowFromCache bool) (int64, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetGuestCount(channelID, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetGuestCount")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetMany(ids []string, allowFromCache bool) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetMany(ids, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetMany")
	// event.Add("params", fmt.Sprintf("%v", []any{ids, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetMember(ctx context.Context, channelID string, userID string) (*model.ChannelMember, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetMember(ctx, channelID, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetMember")
	// event.Add("params", fmt.Sprintf("%v", []any{ctx, channelID, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetMemberCount(channelID string, allowFromCache bool) (int64, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetMemberCount(channelID, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetMemberCount")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetMemberCountFromCache(channelID string) int64 {
	start := time.Now()

	result := s.ChannelStore.GetMemberCountFromCache(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetMemberCountFromCache")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result
}

func (s *DebugBarLayerChannelStore) GetMemberCountsByGroup(ctx context.Context, channelID string, includeTimezones bool) ([]*model.ChannelMemberCountByGroup, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetMemberCountsByGroup(ctx, channelID, includeTimezones)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetMemberCountsByGroup")
	// event.Add("params", fmt.Sprintf("%v", []any{ctx, channelID, includeTimezones}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetMemberForPost(postID string, userID string) (*model.ChannelMember, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetMemberForPost(postID, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetMemberForPost")
	// event.Add("params", fmt.Sprintf("%v", []any{postID, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetMembers(channelID string, offset int, limit int) (model.ChannelMembers, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetMembers(channelID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetMembersByChannelIds(channelIds []string, userID string) (model.ChannelMembers, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetMembersByChannelIds(channelIds, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetMembersByChannelIds")
	// event.Add("params", fmt.Sprintf("%v", []any{channelIds, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetMembersByIds(channelID string, userIds []string) (model.ChannelMembers, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetMembersByIds(channelID, userIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetMembersByIds")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, userIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetMembersForUser(teamID string, userID string) (model.ChannelMembers, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetMembersForUser(teamID, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetMembersForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetMembersForUserWithCursor(userID string, teamID string, opts *store.ChannelMemberGraphQLSearchOpts) (model.ChannelMembers, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetMembersForUserWithCursor(userID, teamID, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetMembersForUserWithCursor")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamID, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetMembersForUserWithPagination(userID string, page int, perPage int) (model.ChannelMembersWithTeamData, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetMembersForUserWithPagination(userID, page, perPage)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetMembersForUserWithPagination")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, page, perPage}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetMembersInfoByChannelIds(channelIDs []string) (map[string][]*model.User, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetMembersInfoByChannelIds(channelIDs)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetMembersInfoByChannelIds")
	// event.Add("params", fmt.Sprintf("%v", []any{channelIDs}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetMoreChannels(teamID string, userID string, offset int, limit int) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetMoreChannels(teamID, userID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetMoreChannels")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetPinnedPostCount(channelID string, allowFromCache bool) (int64, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetPinnedPostCount(channelID, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetPinnedPostCount")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetPinnedPosts(channelID string) (*model.PostList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetPinnedPosts(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetPinnedPosts")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetPrivateChannelsForTeam(teamID string, offset int, limit int) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetPrivateChannelsForTeam(teamID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetPrivateChannelsForTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetPublicChannelsByIdsForTeam(teamID string, channelIds []string) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetPublicChannelsByIdsForTeam(teamID, channelIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetPublicChannelsByIdsForTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, channelIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetPublicChannelsForTeam(teamID string, offset int, limit int) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetPublicChannelsForTeam(teamID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetPublicChannelsForTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetSidebarCategories(userID string, opts *store.SidebarCategorySearchOpts) (*model.OrderedSidebarCategories, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetSidebarCategories(userID, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetSidebarCategories")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetSidebarCategoriesForTeamForUser(userID string, teamID string) (*model.OrderedSidebarCategories, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetSidebarCategoriesForTeamForUser(userID, teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetSidebarCategoriesForTeamForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetSidebarCategory(categoryID string) (*model.SidebarCategoryWithChannels, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetSidebarCategory(categoryID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetSidebarCategory")
	// event.Add("params", fmt.Sprintf("%v", []any{categoryID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetSidebarCategoryOrder(userID string, teamID string) ([]string, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetSidebarCategoryOrder(userID, teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetSidebarCategoryOrder")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetTeamChannels(teamID string) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetTeamChannels(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetTeamChannels")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetTeamForChannel(channelID string) (*model.Team, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetTeamForChannel(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetTeamForChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetTeamMembersForChannel(channelID string) ([]string, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetTeamMembersForChannel(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetTeamMembersForChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetTopChannelsForTeamSince(teamID string, userID string, since int64, offset int, limit int) (*model.TopChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetTopChannelsForTeamSince(teamID, userID, since, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetTopChannelsForTeamSince")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID, since, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetTopChannelsForUserSince(userID string, teamID string, since int64, offset int, limit int) (*model.TopChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetTopChannelsForUserSince(userID, teamID, since, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetTopChannelsForUserSince")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamID, since, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetTopInactiveChannelsForTeamSince(teamID string, userID string, since int64, offset int, limit int) (*model.TopInactiveChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetTopInactiveChannelsForTeamSince(teamID, userID, since, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetTopInactiveChannelsForTeamSince")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID, since, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GetTopInactiveChannelsForUserSince(teamID string, userID string, since int64, offset int, limit int) (*model.TopInactiveChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.GetTopInactiveChannelsForUserSince(teamID, userID, since, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GetTopInactiveChannelsForUserSince")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID, since, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) GroupSyncedChannelCount() (int64, error) {
	start := time.Now()

	result, err := s.ChannelStore.GroupSyncedChannelCount()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.GroupSyncedChannelCount")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) IncrementMentionCount(channelID string, userIDs []string, isRoot bool, isUrgent bool) error {
	start := time.Now()

	err := s.ChannelStore.IncrementMentionCount(channelID, userIDs, isRoot, isUrgent)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.IncrementMentionCount")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, userIDs, isRoot, isUrgent}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) InvalidateAllChannelMembersForUser(userID string) {
	start := time.Now()

	s.ChannelStore.InvalidateAllChannelMembersForUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.InvalidateAllChannelMembersForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerChannelStore) InvalidateCacheForChannelMembersNotifyProps(channelID string) {
	start := time.Now()

	s.ChannelStore.InvalidateCacheForChannelMembersNotifyProps(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.InvalidateCacheForChannelMembersNotifyProps")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerChannelStore) InvalidateChannel(id string) {
	start := time.Now()

	s.ChannelStore.InvalidateChannel(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.InvalidateChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerChannelStore) InvalidateChannelByName(teamID string, name string) {
	start := time.Now()

	s.ChannelStore.InvalidateChannelByName(teamID, name)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.InvalidateChannelByName")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, name}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerChannelStore) InvalidateGuestCount(channelID string) {
	start := time.Now()

	s.ChannelStore.InvalidateGuestCount(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.InvalidateGuestCount")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerChannelStore) InvalidateMemberCount(channelID string) {
	start := time.Now()

	s.ChannelStore.InvalidateMemberCount(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.InvalidateMemberCount")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerChannelStore) InvalidatePinnedPostCount(channelID string) {
	start := time.Now()

	s.ChannelStore.InvalidatePinnedPostCount(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.InvalidatePinnedPostCount")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerChannelStore) IsUserInChannelUseCache(userID string, channelID string) bool {
	start := time.Now()

	result := s.ChannelStore.IsUserInChannelUseCache(userID, channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.IsUserInChannelUseCache")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result
}

func (s *DebugBarLayerChannelStore) MigrateChannelMembers(fromChannelID string, fromUserID string) (map[string]string, error) {
	start := time.Now()

	result, err := s.ChannelStore.MigrateChannelMembers(fromChannelID, fromUserID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.MigrateChannelMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{fromChannelID, fromUserID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) PermanentDelete(channelID string) error {
	start := time.Now()

	err := s.ChannelStore.PermanentDelete(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.PermanentDelete")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) PermanentDeleteByTeam(teamID string) error {
	start := time.Now()

	err := s.ChannelStore.PermanentDeleteByTeam(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.PermanentDeleteByTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) PermanentDeleteMembersByChannel(channelID string) error {
	start := time.Now()

	err := s.ChannelStore.PermanentDeleteMembersByChannel(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.PermanentDeleteMembersByChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) PermanentDeleteMembersByUser(userID string) error {
	start := time.Now()

	err := s.ChannelStore.PermanentDeleteMembersByUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.PermanentDeleteMembersByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) PostCountsByDuration(channelIDs []string, sinceUnixMillis int64, userID *string, duration model.PostCountGrouping, groupingLocation *time.Location) ([]*model.DurationPostCount, error) {
	start := time.Now()

	result, err := s.ChannelStore.PostCountsByDuration(channelIDs, sinceUnixMillis, userID, duration, groupingLocation)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.PostCountsByDuration")
	// event.Add("params", fmt.Sprintf("%v", []any{channelIDs, sinceUnixMillis, userID, duration, groupingLocation}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) RemoveAllDeactivatedMembers(channelID string) error {
	start := time.Now()

	err := s.ChannelStore.RemoveAllDeactivatedMembers(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.RemoveAllDeactivatedMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) RemoveMember(channelID string, userID string) error {
	start := time.Now()

	err := s.ChannelStore.RemoveMember(channelID, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.RemoveMember")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) RemoveMembers(channelID string, userIds []string) error {
	start := time.Now()

	err := s.ChannelStore.RemoveMembers(channelID, userIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.RemoveMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, userIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) ResetAllChannelSchemes() error {
	start := time.Now()

	err := s.ChannelStore.ResetAllChannelSchemes()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.ResetAllChannelSchemes")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) Restore(channelID string, timestamp int64) error {
	start := time.Now()

	err := s.ChannelStore.Restore(channelID, timestamp)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.Restore")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, timestamp}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) Save(channel *model.Channel, maxChannelsPerTeam int64) (*model.Channel, error) {
	start := time.Now()

	result, err := s.ChannelStore.Save(channel, maxChannelsPerTeam)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{channel, maxChannelsPerTeam}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) SaveDirectChannel(channel *model.Channel, member1 *model.ChannelMember, member2 *model.ChannelMember) (*model.Channel, error) {
	start := time.Now()

	result, err := s.ChannelStore.SaveDirectChannel(channel, member1, member2)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.SaveDirectChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{channel, member1, member2}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) SaveMember(member *model.ChannelMember) (*model.ChannelMember, error) {
	start := time.Now()

	result, err := s.ChannelStore.SaveMember(member)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.SaveMember")
	// event.Add("params", fmt.Sprintf("%v", []any{member}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) SaveMultipleMembers(members []*model.ChannelMember) ([]*model.ChannelMember, error) {
	start := time.Now()

	result, err := s.ChannelStore.SaveMultipleMembers(members)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.SaveMultipleMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{members}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) SearchAllChannels(term string, opts store.ChannelSearchOpts) (model.ChannelListWithTeamData, int64, error) {
	start := time.Now()

	result, resultVar1, err := s.ChannelStore.SearchAllChannels(term, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.SearchAllChannels")
	// event.Add("params", fmt.Sprintf("%v", []any{term, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, resultVar1, err
}

func (s *DebugBarLayerChannelStore) SearchArchivedInTeam(teamID string, term string, userID string) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.SearchArchivedInTeam(teamID, term, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.SearchArchivedInTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, term, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) SearchForUserInTeam(userID string, teamID string, term string, includeDeleted bool) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.SearchForUserInTeam(userID, teamID, term, includeDeleted)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.SearchForUserInTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamID, term, includeDeleted}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) SearchGroupChannels(userID string, term string) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.SearchGroupChannels(userID, term)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.SearchGroupChannels")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, term}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) SearchInTeam(teamID string, term string, includeDeleted bool) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.SearchInTeam(teamID, term, includeDeleted)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.SearchInTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, term, includeDeleted}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) SearchMore(userID string, teamID string, term string) (model.ChannelList, error) {
	start := time.Now()

	result, err := s.ChannelStore.SearchMore(userID, teamID, term)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.SearchMore")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamID, term}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) SetDeleteAt(channelID string, deleteAt int64, updateAt int64) error {
	start := time.Now()

	err := s.ChannelStore.SetDeleteAt(channelID, deleteAt, updateAt)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.SetDeleteAt")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, deleteAt, updateAt}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) SetShared(channelId string, shared bool) error {
	start := time.Now()

	err := s.ChannelStore.SetShared(channelId, shared)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.SetShared")
	// event.Add("params", fmt.Sprintf("%v", []any{channelId, shared}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) Update(channel *model.Channel) (*model.Channel, error) {
	start := time.Now()

	result, err := s.ChannelStore.Update(channel)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.Update")
	// event.Add("params", fmt.Sprintf("%v", []any{channel}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) UpdateLastViewedAt(channelIds []string, userID string) (map[string]int64, error) {
	start := time.Now()

	result, err := s.ChannelStore.UpdateLastViewedAt(channelIds, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.UpdateLastViewedAt")
	// event.Add("params", fmt.Sprintf("%v", []any{channelIds, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) UpdateLastViewedAtPost(unreadPost *model.Post, userID string, mentionCount int, mentionCountRoot int, urgentMentionCount int, setUnreadCountRoot bool) (*model.ChannelUnreadAt, error) {
	start := time.Now()

	result, err := s.ChannelStore.UpdateLastViewedAtPost(unreadPost, userID, mentionCount, mentionCountRoot, urgentMentionCount, setUnreadCountRoot)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.UpdateLastViewedAtPost")
	// event.Add("params", fmt.Sprintf("%v", []any{unreadPost, userID, mentionCount, mentionCountRoot, urgentMentionCount, setUnreadCountRoot}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) UpdateMember(member *model.ChannelMember) (*model.ChannelMember, error) {
	start := time.Now()

	result, err := s.ChannelStore.UpdateMember(member)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.UpdateMember")
	// event.Add("params", fmt.Sprintf("%v", []any{member}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) UpdateMemberNotifyProps(channelID string, userID string, props map[string]string) (*model.ChannelMember, error) {
	start := time.Now()

	result, err := s.ChannelStore.UpdateMemberNotifyProps(channelID, userID, props)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.UpdateMemberNotifyProps")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, userID, props}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) UpdateMembersRole(channelID string, userIDs []string) error {
	start := time.Now()

	err := s.ChannelStore.UpdateMembersRole(channelID, userIDs)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.UpdateMembersRole")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, userIDs}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) UpdateMultipleMembers(members []*model.ChannelMember) ([]*model.ChannelMember, error) {
	start := time.Now()

	result, err := s.ChannelStore.UpdateMultipleMembers(members)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.UpdateMultipleMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{members}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelStore) UpdateSidebarCategories(userID string, teamID string, categories []*model.SidebarCategoryWithChannels) ([]*model.SidebarCategoryWithChannels, []*model.SidebarCategoryWithChannels, error) {
	start := time.Now()

	result, resultVar1, err := s.ChannelStore.UpdateSidebarCategories(userID, teamID, categories)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.UpdateSidebarCategories")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamID, categories}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, resultVar1, err
}

func (s *DebugBarLayerChannelStore) UpdateSidebarCategoryOrder(userID string, teamID string, categoryOrder []string) error {
	start := time.Now()

	err := s.ChannelStore.UpdateSidebarCategoryOrder(userID, teamID, categoryOrder)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.UpdateSidebarCategoryOrder")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamID, categoryOrder}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) UpdateSidebarChannelCategoryOnMove(channel *model.Channel, newTeamID string) error {
	start := time.Now()

	err := s.ChannelStore.UpdateSidebarChannelCategoryOnMove(channel, newTeamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.UpdateSidebarChannelCategoryOnMove")
	// event.Add("params", fmt.Sprintf("%v", []any{channel, newTeamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) UpdateSidebarChannelsByPreferences(preferences model.Preferences) error {
	start := time.Now()

	err := s.ChannelStore.UpdateSidebarChannelsByPreferences(preferences)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.UpdateSidebarChannelsByPreferences")
	// event.Add("params", fmt.Sprintf("%v", []any{preferences}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelStore) UserBelongsToChannels(userID string, channelIds []string) (bool, error) {
	start := time.Now()

	result, err := s.ChannelStore.UserBelongsToChannels(userID, channelIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelStore.UserBelongsToChannels")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, channelIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelMemberHistoryStore) DeleteOrphanedRows(limit int) (int64, error) {
	start := time.Now()

	result, err := s.ChannelMemberHistoryStore.DeleteOrphanedRows(limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelMemberHistoryStore.DeleteOrphanedRows")
	// event.Add("params", fmt.Sprintf("%v", []any{limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelMemberHistoryStore) GetChannelsLeftSince(userID string, since int64) ([]string, error) {
	start := time.Now()

	result, err := s.ChannelMemberHistoryStore.GetChannelsLeftSince(userID, since)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelMemberHistoryStore.GetChannelsLeftSince")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, since}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelMemberHistoryStore) GetUsersInChannelDuring(startTime int64, endTime int64, channelID string) ([]*model.ChannelMemberHistoryResult, error) {
	start := time.Now()

	result, err := s.ChannelMemberHistoryStore.GetUsersInChannelDuring(startTime, endTime, channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelMemberHistoryStore.GetUsersInChannelDuring")
	// event.Add("params", fmt.Sprintf("%v", []any{startTime, endTime, channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelMemberHistoryStore) LogJoinEvent(userID string, channelID string, joinTime int64) error {
	start := time.Now()

	err := s.ChannelMemberHistoryStore.LogJoinEvent(userID, channelID, joinTime)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelMemberHistoryStore.LogJoinEvent")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, channelID, joinTime}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelMemberHistoryStore) LogLeaveEvent(userID string, channelID string, leaveTime int64) error {
	start := time.Now()

	err := s.ChannelMemberHistoryStore.LogLeaveEvent(userID, channelID, leaveTime)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelMemberHistoryStore.LogLeaveEvent")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, channelID, leaveTime}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerChannelMemberHistoryStore) PermanentDeleteBatch(endTime int64, limit int64) (int64, error) {
	start := time.Now()

	result, err := s.ChannelMemberHistoryStore.PermanentDeleteBatch(endTime, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelMemberHistoryStore.PermanentDeleteBatch")
	// event.Add("params", fmt.Sprintf("%v", []any{endTime, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerChannelMemberHistoryStore) PermanentDeleteBatchForRetentionPolicies(now int64, globalPolicyEndTime int64, limit int64, cursor model.RetentionPolicyCursor) (int64, model.RetentionPolicyCursor, error) {
	start := time.Now()

	result, resultVar1, err := s.ChannelMemberHistoryStore.PermanentDeleteBatchForRetentionPolicies(now, globalPolicyEndTime, limit, cursor)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ChannelMemberHistoryStore.PermanentDeleteBatchForRetentionPolicies")
	// event.Add("params", fmt.Sprintf("%v", []any{now, globalPolicyEndTime, limit, cursor}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, resultVar1, err
}

func (s *DebugBarLayerClusterDiscoveryStore) Cleanup() error {
	start := time.Now()

	err := s.ClusterDiscoveryStore.Cleanup()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ClusterDiscoveryStore.Cleanup")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerClusterDiscoveryStore) Delete(discovery *model.ClusterDiscovery) (bool, error) {
	start := time.Now()

	result, err := s.ClusterDiscoveryStore.Delete(discovery)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ClusterDiscoveryStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{discovery}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerClusterDiscoveryStore) Exists(discovery *model.ClusterDiscovery) (bool, error) {
	start := time.Now()

	result, err := s.ClusterDiscoveryStore.Exists(discovery)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ClusterDiscoveryStore.Exists")
	// event.Add("params", fmt.Sprintf("%v", []any{discovery}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerClusterDiscoveryStore) GetAll(discoveryType string, clusterName string) ([]*model.ClusterDiscovery, error) {
	start := time.Now()

	result, err := s.ClusterDiscoveryStore.GetAll(discoveryType, clusterName)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ClusterDiscoveryStore.GetAll")
	// event.Add("params", fmt.Sprintf("%v", []any{discoveryType, clusterName}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerClusterDiscoveryStore) Save(discovery *model.ClusterDiscovery) error {
	start := time.Now()

	err := s.ClusterDiscoveryStore.Save(discovery)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ClusterDiscoveryStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{discovery}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerClusterDiscoveryStore) SetLastPingAt(discovery *model.ClusterDiscovery) error {
	start := time.Now()

	err := s.ClusterDiscoveryStore.SetLastPingAt(discovery)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ClusterDiscoveryStore.SetLastPingAt")
	// event.Add("params", fmt.Sprintf("%v", []any{discovery}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerCommandStore) AnalyticsCommandCount(teamID string) (int64, error) {
	start := time.Now()

	result, err := s.CommandStore.AnalyticsCommandCount(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "CommandStore.AnalyticsCommandCount")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerCommandStore) Delete(commandID string, timestamp int64) error {
	start := time.Now()

	err := s.CommandStore.Delete(commandID, timestamp)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "CommandStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{commandID, timestamp}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerCommandStore) Get(id string) (*model.Command, error) {
	start := time.Now()

	result, err := s.CommandStore.Get(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "CommandStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerCommandStore) GetByTeam(teamID string) ([]*model.Command, error) {
	start := time.Now()

	result, err := s.CommandStore.GetByTeam(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "CommandStore.GetByTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerCommandStore) GetByTrigger(teamID string, trigger string) (*model.Command, error) {
	start := time.Now()

	result, err := s.CommandStore.GetByTrigger(teamID, trigger)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "CommandStore.GetByTrigger")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, trigger}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerCommandStore) PermanentDeleteByTeam(teamID string) error {
	start := time.Now()

	err := s.CommandStore.PermanentDeleteByTeam(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "CommandStore.PermanentDeleteByTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerCommandStore) PermanentDeleteByUser(userID string) error {
	start := time.Now()

	err := s.CommandStore.PermanentDeleteByUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "CommandStore.PermanentDeleteByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerCommandStore) Save(webhook *model.Command) (*model.Command, error) {
	start := time.Now()

	result, err := s.CommandStore.Save(webhook)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "CommandStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{webhook}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerCommandStore) Update(hook *model.Command) (*model.Command, error) {
	start := time.Now()

	result, err := s.CommandStore.Update(hook)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "CommandStore.Update")
	// event.Add("params", fmt.Sprintf("%v", []any{hook}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerCommandWebhookStore) Cleanup() {
	start := time.Now()

	s.CommandWebhookStore.Cleanup()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "CommandWebhookStore.Cleanup")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerCommandWebhookStore) Get(id string) (*model.CommandWebhook, error) {
	start := time.Now()

	result, err := s.CommandWebhookStore.Get(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "CommandWebhookStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerCommandWebhookStore) Save(webhook *model.CommandWebhook) (*model.CommandWebhook, error) {
	start := time.Now()

	result, err := s.CommandWebhookStore.Save(webhook)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "CommandWebhookStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{webhook}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerCommandWebhookStore) TryUse(id string, limit int) error {
	start := time.Now()

	err := s.CommandWebhookStore.TryUse(id, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "CommandWebhookStore.TryUse")
	// event.Add("params", fmt.Sprintf("%v", []any{id, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerComplianceStore) ComplianceExport(compliance *model.Compliance, cursor model.ComplianceExportCursor, limit int) ([]*model.CompliancePost, model.ComplianceExportCursor, error) {
	start := time.Now()

	result, resultVar1, err := s.ComplianceStore.ComplianceExport(compliance, cursor, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ComplianceStore.ComplianceExport")
	// event.Add("params", fmt.Sprintf("%v", []any{compliance, cursor, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, resultVar1, err
}

func (s *DebugBarLayerComplianceStore) Get(id string) (*model.Compliance, error) {
	start := time.Now()

	result, err := s.ComplianceStore.Get(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ComplianceStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerComplianceStore) GetAll(offset int, limit int) (model.Compliances, error) {
	start := time.Now()

	result, err := s.ComplianceStore.GetAll(offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ComplianceStore.GetAll")
	// event.Add("params", fmt.Sprintf("%v", []any{offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerComplianceStore) MessageExport(ctx context.Context, cursor model.MessageExportCursor, limit int) ([]*model.MessageExport, model.MessageExportCursor, error) {
	start := time.Now()

	result, resultVar1, err := s.ComplianceStore.MessageExport(ctx, cursor, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ComplianceStore.MessageExport")
	// event.Add("params", fmt.Sprintf("%v", []any{ctx, cursor, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, resultVar1, err
}

func (s *DebugBarLayerComplianceStore) Save(compliance *model.Compliance) (*model.Compliance, error) {
	start := time.Now()

	result, err := s.ComplianceStore.Save(compliance)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ComplianceStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{compliance}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerComplianceStore) Update(compliance *model.Compliance) (*model.Compliance, error) {
	start := time.Now()

	result, err := s.ComplianceStore.Update(compliance)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ComplianceStore.Update")
	// event.Add("params", fmt.Sprintf("%v", []any{compliance}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerDraftStore) Delete(userID string, channelID string, rootID string) error {
	start := time.Now()

	err := s.DraftStore.Delete(userID, channelID, rootID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "DraftStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, channelID, rootID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerDraftStore) Get(userID string, channelID string, rootID string, includeDeleted bool) (*model.Draft, error) {
	start := time.Now()

	result, err := s.DraftStore.Get(userID, channelID, rootID, includeDeleted)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "DraftStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, channelID, rootID, includeDeleted}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerDraftStore) GetDraftsForUser(userID string, teamID string) ([]*model.Draft, error) {
	start := time.Now()

	result, err := s.DraftStore.GetDraftsForUser(userID, teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "DraftStore.GetDraftsForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerDraftStore) Save(d *model.Draft) (*model.Draft, error) {
	start := time.Now()

	result, err := s.DraftStore.Save(d)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "DraftStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{d}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerDraftStore) Update(d *model.Draft) (*model.Draft, error) {
	start := time.Now()

	result, err := s.DraftStore.Update(d)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "DraftStore.Update")
	// event.Add("params", fmt.Sprintf("%v", []any{d}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerEmojiStore) Delete(emoji *model.Emoji, timestamp int64) error {
	start := time.Now()

	err := s.EmojiStore.Delete(emoji, timestamp)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "EmojiStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{emoji, timestamp}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerEmojiStore) Get(ctx context.Context, id string, allowFromCache bool) (*model.Emoji, error) {
	start := time.Now()

	result, err := s.EmojiStore.Get(ctx, id, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "EmojiStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{ctx, id, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerEmojiStore) GetByName(ctx context.Context, name string, allowFromCache bool) (*model.Emoji, error) {
	start := time.Now()

	result, err := s.EmojiStore.GetByName(ctx, name, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "EmojiStore.GetByName")
	// event.Add("params", fmt.Sprintf("%v", []any{ctx, name, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerEmojiStore) GetList(offset int, limit int, sort string) ([]*model.Emoji, error) {
	start := time.Now()

	result, err := s.EmojiStore.GetList(offset, limit, sort)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "EmojiStore.GetList")
	// event.Add("params", fmt.Sprintf("%v", []any{offset, limit, sort}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerEmojiStore) GetMultipleByName(names []string) ([]*model.Emoji, error) {
	start := time.Now()

	result, err := s.EmojiStore.GetMultipleByName(names)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "EmojiStore.GetMultipleByName")
	// event.Add("params", fmt.Sprintf("%v", []any{names}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerEmojiStore) Save(emoji *model.Emoji) (*model.Emoji, error) {
	start := time.Now()

	result, err := s.EmojiStore.Save(emoji)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "EmojiStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{emoji}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerEmojiStore) Search(name string, prefixOnly bool, limit int) ([]*model.Emoji, error) {
	start := time.Now()

	result, err := s.EmojiStore.Search(name, prefixOnly, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "EmojiStore.Search")
	// event.Add("params", fmt.Sprintf("%v", []any{name, prefixOnly, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) AttachToPost(fileID string, postID string, creatorID string) error {
	start := time.Now()

	err := s.FileInfoStore.AttachToPost(fileID, postID, creatorID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.AttachToPost")
	// event.Add("params", fmt.Sprintf("%v", []any{fileID, postID, creatorID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerFileInfoStore) ClearCaches() {
	start := time.Now()

	s.FileInfoStore.ClearCaches()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.ClearCaches")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerFileInfoStore) CountAll() (int64, error) {
	start := time.Now()

	result, err := s.FileInfoStore.CountAll()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.CountAll")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) DeleteForPost(postID string) (string, error) {
	start := time.Now()

	result, err := s.FileInfoStore.DeleteForPost(postID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.DeleteForPost")
	// event.Add("params", fmt.Sprintf("%v", []any{postID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) Get(id string) (*model.FileInfo, error) {
	start := time.Now()

	result, err := s.FileInfoStore.Get(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) GetByIds(ids []string) ([]*model.FileInfo, error) {
	start := time.Now()

	result, err := s.FileInfoStore.GetByIds(ids)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.GetByIds")
	// event.Add("params", fmt.Sprintf("%v", []any{ids}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) GetByPath(path string) (*model.FileInfo, error) {
	start := time.Now()

	result, err := s.FileInfoStore.GetByPath(path)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.GetByPath")
	// event.Add("params", fmt.Sprintf("%v", []any{path}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) GetFilesBatchForIndexing(startTime int64, startFileID string, limit int) ([]*model.FileForIndexing, error) {
	start := time.Now()

	result, err := s.FileInfoStore.GetFilesBatchForIndexing(startTime, startFileID, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.GetFilesBatchForIndexing")
	// event.Add("params", fmt.Sprintf("%v", []any{startTime, startFileID, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) GetForPost(postID string, readFromMaster bool, includeDeleted bool, allowFromCache bool) ([]*model.FileInfo, error) {
	start := time.Now()

	result, err := s.FileInfoStore.GetForPost(postID, readFromMaster, includeDeleted, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.GetForPost")
	// event.Add("params", fmt.Sprintf("%v", []any{postID, readFromMaster, includeDeleted, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) GetForUser(userID string) ([]*model.FileInfo, error) {
	start := time.Now()

	result, err := s.FileInfoStore.GetForUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.GetForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) GetFromMaster(id string) (*model.FileInfo, error) {
	start := time.Now()

	result, err := s.FileInfoStore.GetFromMaster(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.GetFromMaster")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) GetStorageUsage(allowFromCache bool, includeDeleted bool) (int64, error) {
	start := time.Now()

	result, err := s.FileInfoStore.GetStorageUsage(allowFromCache, includeDeleted)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.GetStorageUsage")
	// event.Add("params", fmt.Sprintf("%v", []any{allowFromCache, includeDeleted}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) GetUptoNSizeFileTime(n int64) (int64, error) {
	start := time.Now()

	result, err := s.FileInfoStore.GetUptoNSizeFileTime(n)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.GetUptoNSizeFileTime")
	// event.Add("params", fmt.Sprintf("%v", []any{n}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) GetWithOptions(page int, perPage int, opt *model.GetFileInfosOptions) ([]*model.FileInfo, error) {
	start := time.Now()

	result, err := s.FileInfoStore.GetWithOptions(page, perPage, opt)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.GetWithOptions")
	// event.Add("params", fmt.Sprintf("%v", []any{page, perPage, opt}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) InvalidateFileInfosForPostCache(postID string, deleted bool) {
	start := time.Now()

	s.FileInfoStore.InvalidateFileInfosForPostCache(postID, deleted)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.InvalidateFileInfosForPostCache")
	// event.Add("params", fmt.Sprintf("%v", []any{postID, deleted}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerFileInfoStore) PermanentDelete(fileID string) error {
	start := time.Now()

	err := s.FileInfoStore.PermanentDelete(fileID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.PermanentDelete")
	// event.Add("params", fmt.Sprintf("%v", []any{fileID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerFileInfoStore) PermanentDeleteBatch(endTime int64, limit int64) (int64, error) {
	start := time.Now()

	result, err := s.FileInfoStore.PermanentDeleteBatch(endTime, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.PermanentDeleteBatch")
	// event.Add("params", fmt.Sprintf("%v", []any{endTime, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) PermanentDeleteByUser(userID string) (int64, error) {
	start := time.Now()

	result, err := s.FileInfoStore.PermanentDeleteByUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.PermanentDeleteByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) Save(info *model.FileInfo) (*model.FileInfo, error) {
	start := time.Now()

	result, err := s.FileInfoStore.Save(info)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{info}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) Search(paramsList []*model.SearchParams, userID string, teamID string, page int, perPage int) (*model.FileInfoList, error) {
	start := time.Now()

	result, err := s.FileInfoStore.Search(paramsList, userID, teamID, page, perPage)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.Search")
	// event.Add("params", fmt.Sprintf("%v", []any{paramsList, userID, teamID, page, perPage}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerFileInfoStore) SetContent(fileID string, content string) error {
	start := time.Now()

	err := s.FileInfoStore.SetContent(fileID, content)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.SetContent")
	// event.Add("params", fmt.Sprintf("%v", []any{fileID, content}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerFileInfoStore) Upsert(info *model.FileInfo) (*model.FileInfo, error) {
	start := time.Now()

	result, err := s.FileInfoStore.Upsert(info)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "FileInfoStore.Upsert")
	// event.Add("params", fmt.Sprintf("%v", []any{info}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) AdminRoleGroupsForSyncableMember(userID string, syncableID string, syncableType model.GroupSyncableType) ([]string, error) {
	start := time.Now()

	result, err := s.GroupStore.AdminRoleGroupsForSyncableMember(userID, syncableID, syncableType)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.AdminRoleGroupsForSyncableMember")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, syncableID, syncableType}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) ChannelMembersMinusGroupMembers(channelID string, groupIDs []string, page int, perPage int) ([]*model.UserWithGroups, error) {
	start := time.Now()

	result, err := s.GroupStore.ChannelMembersMinusGroupMembers(channelID, groupIDs, page, perPage)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.ChannelMembersMinusGroupMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, groupIDs, page, perPage}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) ChannelMembersToAdd(since int64, channelID *string, includeRemovedMembers bool) ([]*model.UserChannelIDPair, error) {
	start := time.Now()

	result, err := s.GroupStore.ChannelMembersToAdd(since, channelID, includeRemovedMembers)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.ChannelMembersToAdd")
	// event.Add("params", fmt.Sprintf("%v", []any{since, channelID, includeRemovedMembers}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) ChannelMembersToRemove(channelID *string) ([]*model.ChannelMember, error) {
	start := time.Now()

	result, err := s.GroupStore.ChannelMembersToRemove(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.ChannelMembersToRemove")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) CountChannelMembersMinusGroupMembers(channelID string, groupIDs []string) (int64, error) {
	start := time.Now()

	result, err := s.GroupStore.CountChannelMembersMinusGroupMembers(channelID, groupIDs)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.CountChannelMembersMinusGroupMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, groupIDs}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) CountGroupsByChannel(channelID string, opts model.GroupSearchOpts) (int64, error) {
	start := time.Now()

	result, err := s.GroupStore.CountGroupsByChannel(channelID, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.CountGroupsByChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) CountGroupsByTeam(teamID string, opts model.GroupSearchOpts) (int64, error) {
	start := time.Now()

	result, err := s.GroupStore.CountGroupsByTeam(teamID, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.CountGroupsByTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) CountTeamMembersMinusGroupMembers(teamID string, groupIDs []string) (int64, error) {
	start := time.Now()

	result, err := s.GroupStore.CountTeamMembersMinusGroupMembers(teamID, groupIDs)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.CountTeamMembersMinusGroupMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, groupIDs}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) Create(group *model.Group) (*model.Group, error) {
	start := time.Now()

	result, err := s.GroupStore.Create(group)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.Create")
	// event.Add("params", fmt.Sprintf("%v", []any{group}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) CreateGroupSyncable(groupSyncable *model.GroupSyncable) (*model.GroupSyncable, error) {
	start := time.Now()

	result, err := s.GroupStore.CreateGroupSyncable(groupSyncable)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.CreateGroupSyncable")
	// event.Add("params", fmt.Sprintf("%v", []any{groupSyncable}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) CreateWithUserIds(group *model.GroupWithUserIds) (*model.Group, error) {
	start := time.Now()

	result, err := s.GroupStore.CreateWithUserIds(group)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.CreateWithUserIds")
	// event.Add("params", fmt.Sprintf("%v", []any{group}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) Delete(groupID string) (*model.Group, error) {
	start := time.Now()

	result, err := s.GroupStore.Delete(groupID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) DeleteGroupSyncable(groupID string, syncableID string, syncableType model.GroupSyncableType) (*model.GroupSyncable, error) {
	start := time.Now()

	result, err := s.GroupStore.DeleteGroupSyncable(groupID, syncableID, syncableType)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.DeleteGroupSyncable")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, syncableID, syncableType}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) DeleteMember(groupID string, userID string) (*model.GroupMember, error) {
	start := time.Now()

	result, err := s.GroupStore.DeleteMember(groupID, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.DeleteMember")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) DeleteMembers(groupID string, userIDs []string) ([]*model.GroupMember, error) {
	start := time.Now()

	result, err := s.GroupStore.DeleteMembers(groupID, userIDs)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.DeleteMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, userIDs}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) DistinctGroupMemberCount() (int64, error) {
	start := time.Now()

	result, err := s.GroupStore.DistinctGroupMemberCount()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.DistinctGroupMemberCount")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) DistinctGroupMemberCountForSource(source model.GroupSource) (int64, error) {
	start := time.Now()

	result, err := s.GroupStore.DistinctGroupMemberCountForSource(source)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.DistinctGroupMemberCountForSource")
	// event.Add("params", fmt.Sprintf("%v", []any{source}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) Get(groupID string) (*model.Group, error) {
	start := time.Now()

	result, err := s.GroupStore.Get(groupID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetAllBySource(groupSource model.GroupSource) ([]*model.Group, error) {
	start := time.Now()

	result, err := s.GroupStore.GetAllBySource(groupSource)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetAllBySource")
	// event.Add("params", fmt.Sprintf("%v", []any{groupSource}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetAllGroupSyncablesByGroupId(groupID string, syncableType model.GroupSyncableType) ([]*model.GroupSyncable, error) {
	start := time.Now()

	result, err := s.GroupStore.GetAllGroupSyncablesByGroupId(groupID, syncableType)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetAllGroupSyncablesByGroupId")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, syncableType}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetByIDs(groupIDs []string) ([]*model.Group, error) {
	start := time.Now()

	result, err := s.GroupStore.GetByIDs(groupIDs)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetByIDs")
	// event.Add("params", fmt.Sprintf("%v", []any{groupIDs}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetByName(name string, opts model.GroupSearchOpts) (*model.Group, error) {
	start := time.Now()

	result, err := s.GroupStore.GetByName(name, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetByName")
	// event.Add("params", fmt.Sprintf("%v", []any{name, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetByRemoteID(remoteID string, groupSource model.GroupSource) (*model.Group, error) {
	start := time.Now()

	result, err := s.GroupStore.GetByRemoteID(remoteID, groupSource)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetByRemoteID")
	// event.Add("params", fmt.Sprintf("%v", []any{remoteID, groupSource}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetByUser(userID string) ([]*model.Group, error) {
	start := time.Now()

	result, err := s.GroupStore.GetByUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetGroupSyncable(groupID string, syncableID string, syncableType model.GroupSyncableType) (*model.GroupSyncable, error) {
	start := time.Now()

	result, err := s.GroupStore.GetGroupSyncable(groupID, syncableID, syncableType)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetGroupSyncable")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, syncableID, syncableType}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetGroups(page int, perPage int, opts model.GroupSearchOpts, viewRestrictions *model.ViewUsersRestrictions) ([]*model.Group, error) {
	start := time.Now()

	result, err := s.GroupStore.GetGroups(page, perPage, opts, viewRestrictions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetGroups")
	// event.Add("params", fmt.Sprintf("%v", []any{page, perPage, opts, viewRestrictions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetGroupsAssociatedToChannelsByTeam(teamID string, opts model.GroupSearchOpts) (map[string][]*model.GroupWithSchemeAdmin, error) {
	start := time.Now()

	result, err := s.GroupStore.GetGroupsAssociatedToChannelsByTeam(teamID, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetGroupsAssociatedToChannelsByTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetGroupsByChannel(channelID string, opts model.GroupSearchOpts) ([]*model.GroupWithSchemeAdmin, error) {
	start := time.Now()

	result, err := s.GroupStore.GetGroupsByChannel(channelID, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetGroupsByChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetGroupsByTeam(teamID string, opts model.GroupSearchOpts) ([]*model.GroupWithSchemeAdmin, error) {
	start := time.Now()

	result, err := s.GroupStore.GetGroupsByTeam(teamID, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetGroupsByTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetMember(groupID string, userID string) (*model.GroupMember, error) {
	start := time.Now()

	result, err := s.GroupStore.GetMember(groupID, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetMember")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetMemberCount(groupID string) (int64, error) {
	start := time.Now()

	result, err := s.GroupStore.GetMemberCount(groupID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetMemberCount")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetMemberCountWithRestrictions(groupID string, viewRestrictions *model.ViewUsersRestrictions) (int64, error) {
	start := time.Now()

	result, err := s.GroupStore.GetMemberCountWithRestrictions(groupID, viewRestrictions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetMemberCountWithRestrictions")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, viewRestrictions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetMemberUsers(groupID string) ([]*model.User, error) {
	start := time.Now()

	result, err := s.GroupStore.GetMemberUsers(groupID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetMemberUsers")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetMemberUsersInTeam(groupID string, teamID string) ([]*model.User, error) {
	start := time.Now()

	result, err := s.GroupStore.GetMemberUsersInTeam(groupID, teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetMemberUsersInTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetMemberUsersNotInChannel(groupID string, channelID string) ([]*model.User, error) {
	start := time.Now()

	result, err := s.GroupStore.GetMemberUsersNotInChannel(groupID, channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetMemberUsersNotInChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetMemberUsersPage(groupID string, page int, perPage int, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.GroupStore.GetMemberUsersPage(groupID, page, perPage, viewRestrictions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetMemberUsersPage")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, page, perPage, viewRestrictions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetMemberUsersSortedPage(groupID string, page int, perPage int, viewRestrictions *model.ViewUsersRestrictions, teammateNameDisplay string) ([]*model.User, error) {
	start := time.Now()

	result, err := s.GroupStore.GetMemberUsersSortedPage(groupID, page, perPage, viewRestrictions, teammateNameDisplay)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetMemberUsersSortedPage")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, page, perPage, viewRestrictions, teammateNameDisplay}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GetNonMemberUsersPage(groupID string, page int, perPage int, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.GroupStore.GetNonMemberUsersPage(groupID, page, perPage, viewRestrictions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GetNonMemberUsersPage")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, page, perPage, viewRestrictions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GroupChannelCount() (int64, error) {
	start := time.Now()

	result, err := s.GroupStore.GroupChannelCount()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GroupChannelCount")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GroupCount() (int64, error) {
	start := time.Now()

	result, err := s.GroupStore.GroupCount()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GroupCount")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GroupCountBySource(source model.GroupSource) (int64, error) {
	start := time.Now()

	result, err := s.GroupStore.GroupCountBySource(source)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GroupCountBySource")
	// event.Add("params", fmt.Sprintf("%v", []any{source}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GroupCountWithAllowReference() (int64, error) {
	start := time.Now()

	result, err := s.GroupStore.GroupCountWithAllowReference()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GroupCountWithAllowReference")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GroupMemberCount() (int64, error) {
	start := time.Now()

	result, err := s.GroupStore.GroupMemberCount()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GroupMemberCount")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) GroupTeamCount() (int64, error) {
	start := time.Now()

	result, err := s.GroupStore.GroupTeamCount()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.GroupTeamCount")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) PermanentDeleteMembersByUser(userID string) error {
	start := time.Now()

	err := s.GroupStore.PermanentDeleteMembersByUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.PermanentDeleteMembersByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerGroupStore) PermittedSyncableAdmins(syncableID string, syncableType model.GroupSyncableType) ([]string, error) {
	start := time.Now()

	result, err := s.GroupStore.PermittedSyncableAdmins(syncableID, syncableType)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.PermittedSyncableAdmins")
	// event.Add("params", fmt.Sprintf("%v", []any{syncableID, syncableType}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) Restore(groupID string) (*model.Group, error) {
	start := time.Now()

	result, err := s.GroupStore.Restore(groupID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.Restore")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) TeamMembersMinusGroupMembers(teamID string, groupIDs []string, page int, perPage int) ([]*model.UserWithGroups, error) {
	start := time.Now()

	result, err := s.GroupStore.TeamMembersMinusGroupMembers(teamID, groupIDs, page, perPage)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.TeamMembersMinusGroupMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, groupIDs, page, perPage}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) TeamMembersToAdd(since int64, teamID *string, includeRemovedMembers bool) ([]*model.UserTeamIDPair, error) {
	start := time.Now()

	result, err := s.GroupStore.TeamMembersToAdd(since, teamID, includeRemovedMembers)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.TeamMembersToAdd")
	// event.Add("params", fmt.Sprintf("%v", []any{since, teamID, includeRemovedMembers}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) TeamMembersToRemove(teamID *string) ([]*model.TeamMember, error) {
	start := time.Now()

	result, err := s.GroupStore.TeamMembersToRemove(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.TeamMembersToRemove")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) Update(group *model.Group) (*model.Group, error) {
	start := time.Now()

	result, err := s.GroupStore.Update(group)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.Update")
	// event.Add("params", fmt.Sprintf("%v", []any{group}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) UpdateGroupSyncable(groupSyncable *model.GroupSyncable) (*model.GroupSyncable, error) {
	start := time.Now()

	result, err := s.GroupStore.UpdateGroupSyncable(groupSyncable)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.UpdateGroupSyncable")
	// event.Add("params", fmt.Sprintf("%v", []any{groupSyncable}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) UpsertMember(groupID string, userID string) (*model.GroupMember, error) {
	start := time.Now()

	result, err := s.GroupStore.UpsertMember(groupID, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.UpsertMember")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerGroupStore) UpsertMembers(groupID string, userIDs []string) ([]*model.GroupMember, error) {
	start := time.Now()

	result, err := s.GroupStore.UpsertMembers(groupID, userIDs)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "GroupStore.UpsertMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, userIDs}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerJobStore) Cleanup(expiryTime int64, batchSize int) error {
	start := time.Now()

	err := s.JobStore.Cleanup(expiryTime, batchSize)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.Cleanup")
	// event.Add("params", fmt.Sprintf("%v", []any{expiryTime, batchSize}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerJobStore) Delete(id string) (string, error) {
	start := time.Now()

	result, err := s.JobStore.Delete(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerJobStore) Get(id string) (*model.Job, error) {
	start := time.Now()

	result, err := s.JobStore.Get(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerJobStore) GetAllByStatus(status string) ([]*model.Job, error) {
	start := time.Now()

	result, err := s.JobStore.GetAllByStatus(status)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.GetAllByStatus")
	// event.Add("params", fmt.Sprintf("%v", []any{status}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerJobStore) GetAllByType(jobType string) ([]*model.Job, error) {
	start := time.Now()

	result, err := s.JobStore.GetAllByType(jobType)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.GetAllByType")
	// event.Add("params", fmt.Sprintf("%v", []any{jobType}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerJobStore) GetAllByTypeAndStatus(jobType string, status string) ([]*model.Job, error) {
	start := time.Now()

	result, err := s.JobStore.GetAllByTypeAndStatus(jobType, status)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.GetAllByTypeAndStatus")
	// event.Add("params", fmt.Sprintf("%v", []any{jobType, status}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerJobStore) GetAllByTypePage(jobType string, offset int, limit int) ([]*model.Job, error) {
	start := time.Now()

	result, err := s.JobStore.GetAllByTypePage(jobType, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.GetAllByTypePage")
	// event.Add("params", fmt.Sprintf("%v", []any{jobType, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerJobStore) GetAllByTypesPage(jobTypes []string, offset int, limit int) ([]*model.Job, error) {
	start := time.Now()

	result, err := s.JobStore.GetAllByTypesPage(jobTypes, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.GetAllByTypesPage")
	// event.Add("params", fmt.Sprintf("%v", []any{jobTypes, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerJobStore) GetAllPage(offset int, limit int) ([]*model.Job, error) {
	start := time.Now()

	result, err := s.JobStore.GetAllPage(offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.GetAllPage")
	// event.Add("params", fmt.Sprintf("%v", []any{offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerJobStore) GetCountByStatusAndType(status string, jobType string) (int64, error) {
	start := time.Now()

	result, err := s.JobStore.GetCountByStatusAndType(status, jobType)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.GetCountByStatusAndType")
	// event.Add("params", fmt.Sprintf("%v", []any{status, jobType}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerJobStore) GetNewestJobByStatusAndType(status string, jobType string) (*model.Job, error) {
	start := time.Now()

	result, err := s.JobStore.GetNewestJobByStatusAndType(status, jobType)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.GetNewestJobByStatusAndType")
	// event.Add("params", fmt.Sprintf("%v", []any{status, jobType}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerJobStore) GetNewestJobByStatusesAndType(statuses []string, jobType string) (*model.Job, error) {
	start := time.Now()

	result, err := s.JobStore.GetNewestJobByStatusesAndType(statuses, jobType)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.GetNewestJobByStatusesAndType")
	// event.Add("params", fmt.Sprintf("%v", []any{statuses, jobType}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerJobStore) Save(job *model.Job) (*model.Job, error) {
	start := time.Now()

	result, err := s.JobStore.Save(job)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{job}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerJobStore) UpdateOptimistically(job *model.Job, currentStatus string) (bool, error) {
	start := time.Now()

	result, err := s.JobStore.UpdateOptimistically(job, currentStatus)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.UpdateOptimistically")
	// event.Add("params", fmt.Sprintf("%v", []any{job, currentStatus}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerJobStore) UpdateStatus(id string, status string) (*model.Job, error) {
	start := time.Now()

	result, err := s.JobStore.UpdateStatus(id, status)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.UpdateStatus")
	// event.Add("params", fmt.Sprintf("%v", []any{id, status}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerJobStore) UpdateStatusOptimistically(id string, currentStatus string, newStatus string) (bool, error) {
	start := time.Now()

	result, err := s.JobStore.UpdateStatusOptimistically(id, currentStatus, newStatus)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "JobStore.UpdateStatusOptimistically")
	// event.Add("params", fmt.Sprintf("%v", []any{id, currentStatus, newStatus}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerLicenseStore) Get(id string) (*model.LicenseRecord, error) {
	start := time.Now()

	result, err := s.LicenseStore.Get(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "LicenseStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerLicenseStore) GetAll() ([]*model.LicenseRecord, error) {
	start := time.Now()

	result, err := s.LicenseStore.GetAll()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "LicenseStore.GetAll")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerLicenseStore) Save(license *model.LicenseRecord) (*model.LicenseRecord, error) {
	start := time.Now()

	result, err := s.LicenseStore.Save(license)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "LicenseStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{license}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerLinkMetadataStore) Get(url string, timestamp int64) (*model.LinkMetadata, error) {
	start := time.Now()

	result, err := s.LinkMetadataStore.Get(url, timestamp)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "LinkMetadataStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{url, timestamp}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerLinkMetadataStore) Save(linkMetadata *model.LinkMetadata) (*model.LinkMetadata, error) {
	start := time.Now()

	result, err := s.LinkMetadataStore.Save(linkMetadata)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "LinkMetadataStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{linkMetadata}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerNotifyAdminStore) DeleteBefore(trial bool, now int64) error {
	start := time.Now()

	err := s.NotifyAdminStore.DeleteBefore(trial, now)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "NotifyAdminStore.DeleteBefore")
	// event.Add("params", fmt.Sprintf("%v", []any{trial, now}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerNotifyAdminStore) Get(trial bool) ([]*model.NotifyAdminData, error) {
	start := time.Now()

	result, err := s.NotifyAdminStore.Get(trial)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "NotifyAdminStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{trial}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerNotifyAdminStore) GetDataByUserIdAndFeature(userId string, feature model.MattermostFeature) ([]*model.NotifyAdminData, error) {
	start := time.Now()

	result, err := s.NotifyAdminStore.GetDataByUserIdAndFeature(userId, feature)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "NotifyAdminStore.GetDataByUserIdAndFeature")
	// event.Add("params", fmt.Sprintf("%v", []any{userId, feature}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerNotifyAdminStore) Save(data *model.NotifyAdminData) (*model.NotifyAdminData, error) {
	start := time.Now()

	result, err := s.NotifyAdminStore.Save(data)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "NotifyAdminStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{data}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerNotifyAdminStore) Update(userId string, requiredPlan string, requiredFeature model.MattermostFeature, now int64) error {
	start := time.Now()

	err := s.NotifyAdminStore.Update(userId, requiredPlan, requiredFeature, now)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "NotifyAdminStore.Update")
	// event.Add("params", fmt.Sprintf("%v", []any{userId, requiredPlan, requiredFeature, now}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerOAuthStore) DeleteApp(id string) error {
	start := time.Now()

	err := s.OAuthStore.DeleteApp(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.DeleteApp")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerOAuthStore) GetAccessData(token string) (*model.AccessData, error) {
	start := time.Now()

	result, err := s.OAuthStore.GetAccessData(token)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.GetAccessData")
	// event.Add("params", fmt.Sprintf("%v", []any{token}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerOAuthStore) GetAccessDataByRefreshToken(token string) (*model.AccessData, error) {
	start := time.Now()

	result, err := s.OAuthStore.GetAccessDataByRefreshToken(token)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.GetAccessDataByRefreshToken")
	// event.Add("params", fmt.Sprintf("%v", []any{token}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerOAuthStore) GetAccessDataByUserForApp(userID string, clientId string) ([]*model.AccessData, error) {
	start := time.Now()

	result, err := s.OAuthStore.GetAccessDataByUserForApp(userID, clientId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.GetAccessDataByUserForApp")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, clientId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerOAuthStore) GetApp(id string) (*model.OAuthApp, error) {
	start := time.Now()

	result, err := s.OAuthStore.GetApp(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.GetApp")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerOAuthStore) GetAppByUser(userID string, offset int, limit int) ([]*model.OAuthApp, error) {
	start := time.Now()

	result, err := s.OAuthStore.GetAppByUser(userID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.GetAppByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerOAuthStore) GetApps(offset int, limit int) ([]*model.OAuthApp, error) {
	start := time.Now()

	result, err := s.OAuthStore.GetApps(offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.GetApps")
	// event.Add("params", fmt.Sprintf("%v", []any{offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerOAuthStore) GetAuthData(code string) (*model.AuthData, error) {
	start := time.Now()

	result, err := s.OAuthStore.GetAuthData(code)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.GetAuthData")
	// event.Add("params", fmt.Sprintf("%v", []any{code}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerOAuthStore) GetAuthorizedApps(userID string, offset int, limit int) ([]*model.OAuthApp, error) {
	start := time.Now()

	result, err := s.OAuthStore.GetAuthorizedApps(userID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.GetAuthorizedApps")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerOAuthStore) GetPreviousAccessData(userID string, clientId string) (*model.AccessData, error) {
	start := time.Now()

	result, err := s.OAuthStore.GetPreviousAccessData(userID, clientId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.GetPreviousAccessData")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, clientId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerOAuthStore) PermanentDeleteAuthDataByUser(userID string) error {
	start := time.Now()

	err := s.OAuthStore.PermanentDeleteAuthDataByUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.PermanentDeleteAuthDataByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerOAuthStore) RemoveAccessData(token string) error {
	start := time.Now()

	err := s.OAuthStore.RemoveAccessData(token)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.RemoveAccessData")
	// event.Add("params", fmt.Sprintf("%v", []any{token}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerOAuthStore) RemoveAllAccessData() error {
	start := time.Now()

	err := s.OAuthStore.RemoveAllAccessData()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.RemoveAllAccessData")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerOAuthStore) RemoveAuthData(code string) error {
	start := time.Now()

	err := s.OAuthStore.RemoveAuthData(code)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.RemoveAuthData")
	// event.Add("params", fmt.Sprintf("%v", []any{code}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerOAuthStore) SaveAccessData(accessData *model.AccessData) (*model.AccessData, error) {
	start := time.Now()

	result, err := s.OAuthStore.SaveAccessData(accessData)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.SaveAccessData")
	// event.Add("params", fmt.Sprintf("%v", []any{accessData}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerOAuthStore) SaveApp(app *model.OAuthApp) (*model.OAuthApp, error) {
	start := time.Now()

	result, err := s.OAuthStore.SaveApp(app)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.SaveApp")
	// event.Add("params", fmt.Sprintf("%v", []any{app}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerOAuthStore) SaveAuthData(authData *model.AuthData) (*model.AuthData, error) {
	start := time.Now()

	result, err := s.OAuthStore.SaveAuthData(authData)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.SaveAuthData")
	// event.Add("params", fmt.Sprintf("%v", []any{authData}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerOAuthStore) UpdateAccessData(accessData *model.AccessData) (*model.AccessData, error) {
	start := time.Now()

	result, err := s.OAuthStore.UpdateAccessData(accessData)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.UpdateAccessData")
	// event.Add("params", fmt.Sprintf("%v", []any{accessData}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerOAuthStore) UpdateApp(app *model.OAuthApp) (*model.OAuthApp, error) {
	start := time.Now()

	result, err := s.OAuthStore.UpdateApp(app)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "OAuthStore.UpdateApp")
	// event.Add("params", fmt.Sprintf("%v", []any{app}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPluginStore) CompareAndDelete(keyVal *model.PluginKeyValue, oldValue []byte) (bool, error) {
	start := time.Now()

	result, err := s.PluginStore.CompareAndDelete(keyVal, oldValue)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PluginStore.CompareAndDelete")
	// event.Add("params", fmt.Sprintf("%v", []any{keyVal, oldValue}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPluginStore) CompareAndSet(keyVal *model.PluginKeyValue, oldValue []byte) (bool, error) {
	start := time.Now()

	result, err := s.PluginStore.CompareAndSet(keyVal, oldValue)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PluginStore.CompareAndSet")
	// event.Add("params", fmt.Sprintf("%v", []any{keyVal, oldValue}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPluginStore) Delete(pluginID string, key string) error {
	start := time.Now()

	err := s.PluginStore.Delete(pluginID, key)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PluginStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{pluginID, key}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerPluginStore) DeleteAllExpired() error {
	start := time.Now()

	err := s.PluginStore.DeleteAllExpired()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PluginStore.DeleteAllExpired")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerPluginStore) DeleteAllForPlugin(PluginID string) error {
	start := time.Now()

	err := s.PluginStore.DeleteAllForPlugin(PluginID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PluginStore.DeleteAllForPlugin")
	// event.Add("params", fmt.Sprintf("%v", []any{PluginID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerPluginStore) Get(pluginID string, key string) (*model.PluginKeyValue, error) {
	start := time.Now()

	result, err := s.PluginStore.Get(pluginID, key)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PluginStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{pluginID, key}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPluginStore) List(pluginID string, page int, perPage int) ([]string, error) {
	start := time.Now()

	result, err := s.PluginStore.List(pluginID, page, perPage)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PluginStore.List")
	// event.Add("params", fmt.Sprintf("%v", []any{pluginID, page, perPage}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPluginStore) SaveOrUpdate(keyVal *model.PluginKeyValue) (*model.PluginKeyValue, error) {
	start := time.Now()

	result, err := s.PluginStore.SaveOrUpdate(keyVal)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PluginStore.SaveOrUpdate")
	// event.Add("params", fmt.Sprintf("%v", []any{keyVal}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPluginStore) SetWithOptions(pluginID string, key string, value []byte, options model.PluginKVSetOptions) (bool, error) {
	start := time.Now()

	result, err := s.PluginStore.SetWithOptions(pluginID, key, value, options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PluginStore.SetWithOptions")
	// event.Add("params", fmt.Sprintf("%v", []any{pluginID, key, value, options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) AnalyticsPostCount(options *model.PostCountOptions) (int64, error) {
	start := time.Now()

	result, err := s.PostStore.AnalyticsPostCount(options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.AnalyticsPostCount")
	// event.Add("params", fmt.Sprintf("%v", []any{options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) AnalyticsPostCountsByDay(options *model.AnalyticsPostCountsOptions) (model.AnalyticsRows, error) {
	start := time.Now()

	result, err := s.PostStore.AnalyticsPostCountsByDay(options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.AnalyticsPostCountsByDay")
	// event.Add("params", fmt.Sprintf("%v", []any{options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) AnalyticsUserCountsWithPostsByDay(teamID string) (model.AnalyticsRows, error) {
	start := time.Now()

	result, err := s.PostStore.AnalyticsUserCountsWithPostsByDay(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.AnalyticsUserCountsWithPostsByDay")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) ClearCaches() {
	start := time.Now()

	s.PostStore.ClearCaches()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.ClearCaches")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerPostStore) Delete(postID string, timestamp int64, deleteByID string) error {
	start := time.Now()

	err := s.PostStore.Delete(postID, timestamp, deleteByID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{postID, timestamp, deleteByID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerPostStore) DeleteOrphanedRows(limit int) (int64, error) {
	start := time.Now()

	result, err := s.PostStore.DeleteOrphanedRows(limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.DeleteOrphanedRows")
	// event.Add("params", fmt.Sprintf("%v", []any{limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) Get(ctx context.Context, id string, opts model.GetPostsOptions, userID string, sanitizeOptions map[string]bool) (*model.PostList, error) {
	start := time.Now()

	result, err := s.PostStore.Get(ctx, id, opts, userID, sanitizeOptions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{ctx, id, opts, userID, sanitizeOptions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetDirectPostParentsForExportAfter(limit int, afterID string) ([]*model.DirectPostForExport, error) {
	start := time.Now()

	result, err := s.PostStore.GetDirectPostParentsForExportAfter(limit, afterID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetDirectPostParentsForExportAfter")
	// event.Add("params", fmt.Sprintf("%v", []any{limit, afterID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetEditHistoryForPost(postId string) ([]*model.Post, error) {
	start := time.Now()

	result, err := s.PostStore.GetEditHistoryForPost(postId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetEditHistoryForPost")
	// event.Add("params", fmt.Sprintf("%v", []any{postId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetEtag(channelID string, allowFromCache bool, collapsedThreads bool) string {
	start := time.Now()

	result := s.PostStore.GetEtag(channelID, allowFromCache, collapsedThreads)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetEtag")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, allowFromCache, collapsedThreads}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result
}

func (s *DebugBarLayerPostStore) GetFlaggedPosts(userID string, offset int, limit int) (*model.PostList, error) {
	start := time.Now()

	result, err := s.PostStore.GetFlaggedPosts(userID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetFlaggedPosts")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetFlaggedPostsForChannel(userID string, channelID string, offset int, limit int) (*model.PostList, error) {
	start := time.Now()

	result, err := s.PostStore.GetFlaggedPostsForChannel(userID, channelID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetFlaggedPostsForChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, channelID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetFlaggedPostsForTeam(userID string, teamID string, offset int, limit int) (*model.PostList, error) {
	start := time.Now()

	result, err := s.PostStore.GetFlaggedPostsForTeam(userID, teamID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetFlaggedPostsForTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetLastPostRowCreateAt() (int64, error) {
	start := time.Now()

	result, err := s.PostStore.GetLastPostRowCreateAt()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetLastPostRowCreateAt")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetMaxPostSize() int {
	start := time.Now()

	result := s.PostStore.GetMaxPostSize()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetMaxPostSize")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result
}

func (s *DebugBarLayerPostStore) GetNthRecentPostTime(n int64) (int64, error) {
	start := time.Now()

	result, err := s.PostStore.GetNthRecentPostTime(n)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetNthRecentPostTime")
	// event.Add("params", fmt.Sprintf("%v", []any{n}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetOldest() (*model.Post, error) {
	start := time.Now()

	result, err := s.PostStore.GetOldest()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetOldest")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetOldestEntityCreationTime() (int64, error) {
	start := time.Now()

	result, err := s.PostStore.GetOldestEntityCreationTime()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetOldestEntityCreationTime")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetParentsForExportAfter(limit int, afterID string) ([]*model.PostForExport, error) {
	start := time.Now()

	result, err := s.PostStore.GetParentsForExportAfter(limit, afterID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetParentsForExportAfter")
	// event.Add("params", fmt.Sprintf("%v", []any{limit, afterID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetPostAfterTime(channelID string, timestamp int64, collapsedThreads bool) (*model.Post, error) {
	start := time.Now()

	result, err := s.PostStore.GetPostAfterTime(channelID, timestamp, collapsedThreads)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetPostAfterTime")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, timestamp, collapsedThreads}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetPostIdAfterTime(channelID string, timestamp int64, collapsedThreads bool) (string, error) {
	start := time.Now()

	result, err := s.PostStore.GetPostIdAfterTime(channelID, timestamp, collapsedThreads)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetPostIdAfterTime")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, timestamp, collapsedThreads}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetPostIdBeforeTime(channelID string, timestamp int64, collapsedThreads bool) (string, error) {
	start := time.Now()

	result, err := s.PostStore.GetPostIdBeforeTime(channelID, timestamp, collapsedThreads)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetPostIdBeforeTime")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, timestamp, collapsedThreads}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetPostReminderMetadata(postID string) (*store.PostReminderMetadata, error) {
	start := time.Now()

	result, err := s.PostStore.GetPostReminderMetadata(postID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetPostReminderMetadata")
	// event.Add("params", fmt.Sprintf("%v", []any{postID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetPostReminders(now int64) ([]*model.PostReminder, error) {
	start := time.Now()

	result, err := s.PostStore.GetPostReminders(now)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetPostReminders")
	// event.Add("params", fmt.Sprintf("%v", []any{now}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetPosts(options model.GetPostsOptions, allowFromCache bool, sanitizeOptions map[string]bool) (*model.PostList, error) {
	start := time.Now()

	result, err := s.PostStore.GetPosts(options, allowFromCache, sanitizeOptions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetPosts")
	// event.Add("params", fmt.Sprintf("%v", []any{options, allowFromCache, sanitizeOptions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetPostsAfter(options model.GetPostsOptions, sanitizeOptions map[string]bool) (*model.PostList, error) {
	start := time.Now()

	result, err := s.PostStore.GetPostsAfter(options, sanitizeOptions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetPostsAfter")
	// event.Add("params", fmt.Sprintf("%v", []any{options, sanitizeOptions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetPostsBatchForIndexing(startTime int64, startPostID string, limit int) ([]*model.PostForIndexing, error) {
	start := time.Now()

	result, err := s.PostStore.GetPostsBatchForIndexing(startTime, startPostID, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetPostsBatchForIndexing")
	// event.Add("params", fmt.Sprintf("%v", []any{startTime, startPostID, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetPostsBefore(options model.GetPostsOptions, sanitizeOptions map[string]bool) (*model.PostList, error) {
	start := time.Now()

	result, err := s.PostStore.GetPostsBefore(options, sanitizeOptions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetPostsBefore")
	// event.Add("params", fmt.Sprintf("%v", []any{options, sanitizeOptions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetPostsByIds(postIds []string) ([]*model.Post, error) {
	start := time.Now()

	result, err := s.PostStore.GetPostsByIds(postIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetPostsByIds")
	// event.Add("params", fmt.Sprintf("%v", []any{postIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetPostsByThread(threadID string, since int64) ([]*model.Post, error) {
	start := time.Now()

	result, err := s.PostStore.GetPostsByThread(threadID, since)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetPostsByThread")
	// event.Add("params", fmt.Sprintf("%v", []any{threadID, since}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetPostsCreatedAt(channelID string, timestamp int64) ([]*model.Post, error) {
	start := time.Now()

	result, err := s.PostStore.GetPostsCreatedAt(channelID, timestamp)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetPostsCreatedAt")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, timestamp}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetPostsSince(options model.GetPostsSinceOptions, allowFromCache bool, sanitizeOptions map[string]bool) (*model.PostList, error) {
	start := time.Now()

	result, err := s.PostStore.GetPostsSince(options, allowFromCache, sanitizeOptions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetPostsSince")
	// event.Add("params", fmt.Sprintf("%v", []any{options, allowFromCache, sanitizeOptions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetPostsSinceForSync(options model.GetPostsSinceForSyncOptions, cursor model.GetPostsSinceForSyncCursor, limit int) ([]*model.Post, model.GetPostsSinceForSyncCursor, error) {
	start := time.Now()

	result, resultVar1, err := s.PostStore.GetPostsSinceForSync(options, cursor, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetPostsSinceForSync")
	// event.Add("params", fmt.Sprintf("%v", []any{options, cursor, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, resultVar1, err
}

func (s *DebugBarLayerPostStore) GetRecentSearchesForUser(userID string) ([]*model.SearchParams, error) {
	start := time.Now()

	result, err := s.PostStore.GetRecentSearchesForUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetRecentSearchesForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetRepliesForExport(parentID string) ([]*model.ReplyForExport, error) {
	start := time.Now()

	result, err := s.PostStore.GetRepliesForExport(parentID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetRepliesForExport")
	// event.Add("params", fmt.Sprintf("%v", []any{parentID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetSingle(id string, inclDeleted bool) (*model.Post, error) {
	start := time.Now()

	result, err := s.PostStore.GetSingle(id, inclDeleted)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetSingle")
	// event.Add("params", fmt.Sprintf("%v", []any{id, inclDeleted}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) GetTopDMsForUserSince(userID string, since int64, offset int, limit int) (*model.TopDMList, error) {
	start := time.Now()

	result, err := s.PostStore.GetTopDMsForUserSince(userID, since, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.GetTopDMsForUserSince")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, since, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) HasAutoResponsePostByUserSince(options model.GetPostsSinceOptions, userId string) (bool, error) {
	start := time.Now()

	result, err := s.PostStore.HasAutoResponsePostByUserSince(options, userId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.HasAutoResponsePostByUserSince")
	// event.Add("params", fmt.Sprintf("%v", []any{options, userId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) InvalidateLastPostTimeCache(channelID string) {
	start := time.Now()

	s.PostStore.InvalidateLastPostTimeCache(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.InvalidateLastPostTimeCache")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerPostStore) LogRecentSearch(userID string, searchQuery []byte, createAt int64) error {
	start := time.Now()

	err := s.PostStore.LogRecentSearch(userID, searchQuery, createAt)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.LogRecentSearch")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, searchQuery, createAt}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerPostStore) Overwrite(post *model.Post) (*model.Post, error) {
	start := time.Now()

	result, err := s.PostStore.Overwrite(post)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.Overwrite")
	// event.Add("params", fmt.Sprintf("%v", []any{post}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) OverwriteMultiple(posts []*model.Post) ([]*model.Post, int, error) {
	start := time.Now()

	result, resultVar1, err := s.PostStore.OverwriteMultiple(posts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.OverwriteMultiple")
	// event.Add("params", fmt.Sprintf("%v", []any{posts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, resultVar1, err
}

func (s *DebugBarLayerPostStore) PermanentDeleteBatch(endTime int64, limit int64) (int64, error) {
	start := time.Now()

	result, err := s.PostStore.PermanentDeleteBatch(endTime, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.PermanentDeleteBatch")
	// event.Add("params", fmt.Sprintf("%v", []any{endTime, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) PermanentDeleteBatchForRetentionPolicies(now int64, globalPolicyEndTime int64, limit int64, cursor model.RetentionPolicyCursor) (int64, model.RetentionPolicyCursor, error) {
	start := time.Now()

	result, resultVar1, err := s.PostStore.PermanentDeleteBatchForRetentionPolicies(now, globalPolicyEndTime, limit, cursor)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.PermanentDeleteBatchForRetentionPolicies")
	// event.Add("params", fmt.Sprintf("%v", []any{now, globalPolicyEndTime, limit, cursor}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, resultVar1, err
}

func (s *DebugBarLayerPostStore) PermanentDeleteByChannel(channelID string) error {
	start := time.Now()

	err := s.PostStore.PermanentDeleteByChannel(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.PermanentDeleteByChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerPostStore) PermanentDeleteByUser(userID string) error {
	start := time.Now()

	err := s.PostStore.PermanentDeleteByUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.PermanentDeleteByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerPostStore) Save(post *model.Post) (*model.Post, error) {
	start := time.Now()

	result, err := s.PostStore.Save(post)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{post}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) SaveMultiple(posts []*model.Post) ([]*model.Post, int, error) {
	start := time.Now()

	result, resultVar1, err := s.PostStore.SaveMultiple(posts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.SaveMultiple")
	// event.Add("params", fmt.Sprintf("%v", []any{posts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, resultVar1, err
}

func (s *DebugBarLayerPostStore) Search(teamID string, userID string, params *model.SearchParams) (*model.PostList, error) {
	start := time.Now()

	result, err := s.PostStore.Search(teamID, userID, params)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.Search")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID, params}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) SearchPostsForUser(paramsList []*model.SearchParams, userID string, teamID string, page int, perPage int) (*model.PostSearchResults, error) {
	start := time.Now()

	result, err := s.PostStore.SearchPostsForUser(paramsList, userID, teamID, page, perPage)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.SearchPostsForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{paramsList, userID, teamID, page, perPage}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostStore) SetPostReminder(reminder *model.PostReminder) error {
	start := time.Now()

	err := s.PostStore.SetPostReminder(reminder)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.SetPostReminder")
	// event.Add("params", fmt.Sprintf("%v", []any{reminder}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerPostStore) Update(newPost *model.Post, oldPost *model.Post) (*model.Post, error) {
	start := time.Now()

	result, err := s.PostStore.Update(newPost, oldPost)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostStore.Update")
	// event.Add("params", fmt.Sprintf("%v", []any{newPost, oldPost}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostAcknowledgementStore) Delete(acknowledgement *model.PostAcknowledgement) error {
	start := time.Now()

	err := s.PostAcknowledgementStore.Delete(acknowledgement)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostAcknowledgementStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{acknowledgement}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerPostAcknowledgementStore) Get(postID string, userID string) (*model.PostAcknowledgement, error) {
	start := time.Now()

	result, err := s.PostAcknowledgementStore.Get(postID, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostAcknowledgementStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{postID, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostAcknowledgementStore) GetForPost(postID string) ([]*model.PostAcknowledgement, error) {
	start := time.Now()

	result, err := s.PostAcknowledgementStore.GetForPost(postID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostAcknowledgementStore.GetForPost")
	// event.Add("params", fmt.Sprintf("%v", []any{postID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostAcknowledgementStore) GetForPosts(postIds []string) ([]*model.PostAcknowledgement, error) {
	start := time.Now()

	result, err := s.PostAcknowledgementStore.GetForPosts(postIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostAcknowledgementStore.GetForPosts")
	// event.Add("params", fmt.Sprintf("%v", []any{postIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostAcknowledgementStore) Save(postID string, userID string, acknowledgedAt int64) (*model.PostAcknowledgement, error) {
	start := time.Now()

	result, err := s.PostAcknowledgementStore.Save(postID, userID, acknowledgedAt)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostAcknowledgementStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{postID, userID, acknowledgedAt}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostPriorityStore) GetForPost(postId string) (*model.PostPriority, error) {
	start := time.Now()

	result, err := s.PostPriorityStore.GetForPost(postId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostPriorityStore.GetForPost")
	// event.Add("params", fmt.Sprintf("%v", []any{postId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPostPriorityStore) GetForPosts(ids []string) ([]*model.PostPriority, error) {
	start := time.Now()

	result, err := s.PostPriorityStore.GetForPosts(ids)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PostPriorityStore.GetForPosts")
	// event.Add("params", fmt.Sprintf("%v", []any{ids}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPreferenceStore) CleanupFlagsBatch(limit int64) (int64, error) {
	start := time.Now()

	result, err := s.PreferenceStore.CleanupFlagsBatch(limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PreferenceStore.CleanupFlagsBatch")
	// event.Add("params", fmt.Sprintf("%v", []any{limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPreferenceStore) Delete(userID string, category string, name string) error {
	start := time.Now()

	err := s.PreferenceStore.Delete(userID, category, name)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PreferenceStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, category, name}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerPreferenceStore) DeleteCategory(userID string, category string) error {
	start := time.Now()

	err := s.PreferenceStore.DeleteCategory(userID, category)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PreferenceStore.DeleteCategory")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, category}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerPreferenceStore) DeleteCategoryAndName(category string, name string) error {
	start := time.Now()

	err := s.PreferenceStore.DeleteCategoryAndName(category, name)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PreferenceStore.DeleteCategoryAndName")
	// event.Add("params", fmt.Sprintf("%v", []any{category, name}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerPreferenceStore) DeleteOrphanedRows(limit int) (int64, error) {
	start := time.Now()

	result, err := s.PreferenceStore.DeleteOrphanedRows(limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PreferenceStore.DeleteOrphanedRows")
	// event.Add("params", fmt.Sprintf("%v", []any{limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPreferenceStore) Get(userID string, category string, name string) (*model.Preference, error) {
	start := time.Now()

	result, err := s.PreferenceStore.Get(userID, category, name)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PreferenceStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, category, name}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPreferenceStore) GetAll(userID string) (model.Preferences, error) {
	start := time.Now()

	result, err := s.PreferenceStore.GetAll(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PreferenceStore.GetAll")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPreferenceStore) GetCategory(userID string, category string) (model.Preferences, error) {
	start := time.Now()

	result, err := s.PreferenceStore.GetCategory(userID, category)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PreferenceStore.GetCategory")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, category}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPreferenceStore) GetCategoryAndName(category string, nane string) (model.Preferences, error) {
	start := time.Now()

	result, err := s.PreferenceStore.GetCategoryAndName(category, nane)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PreferenceStore.GetCategoryAndName")
	// event.Add("params", fmt.Sprintf("%v", []any{category, nane}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerPreferenceStore) PermanentDeleteByUser(userID string) error {
	start := time.Now()

	err := s.PreferenceStore.PermanentDeleteByUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PreferenceStore.PermanentDeleteByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerPreferenceStore) Save(preferences model.Preferences) error {
	start := time.Now()

	err := s.PreferenceStore.Save(preferences)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "PreferenceStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{preferences}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerProductNoticesStore) Clear(notices []string) error {
	start := time.Now()

	err := s.ProductNoticesStore.Clear(notices)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ProductNoticesStore.Clear")
	// event.Add("params", fmt.Sprintf("%v", []any{notices}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerProductNoticesStore) ClearOldNotices(currentNotices model.ProductNotices) error {
	start := time.Now()

	err := s.ProductNoticesStore.ClearOldNotices(currentNotices)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ProductNoticesStore.ClearOldNotices")
	// event.Add("params", fmt.Sprintf("%v", []any{currentNotices}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerProductNoticesStore) GetViews(userID string) ([]model.ProductNoticeViewState, error) {
	start := time.Now()

	result, err := s.ProductNoticesStore.GetViews(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ProductNoticesStore.GetViews")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerProductNoticesStore) View(userID string, notices []string) error {
	start := time.Now()

	err := s.ProductNoticesStore.View(userID, notices)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ProductNoticesStore.View")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, notices}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerReactionStore) BulkGetForPosts(postIds []string) ([]*model.Reaction, error) {
	start := time.Now()

	result, err := s.ReactionStore.BulkGetForPosts(postIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ReactionStore.BulkGetForPosts")
	// event.Add("params", fmt.Sprintf("%v", []any{postIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerReactionStore) Delete(reaction *model.Reaction) (*model.Reaction, error) {
	start := time.Now()

	result, err := s.ReactionStore.Delete(reaction)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ReactionStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{reaction}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerReactionStore) DeleteAllWithEmojiName(emojiName string) error {
	start := time.Now()

	err := s.ReactionStore.DeleteAllWithEmojiName(emojiName)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ReactionStore.DeleteAllWithEmojiName")
	// event.Add("params", fmt.Sprintf("%v", []any{emojiName}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerReactionStore) DeleteOrphanedRows(limit int) (int64, error) {
	start := time.Now()

	result, err := s.ReactionStore.DeleteOrphanedRows(limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ReactionStore.DeleteOrphanedRows")
	// event.Add("params", fmt.Sprintf("%v", []any{limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerReactionStore) GetForPost(postID string, allowFromCache bool) ([]*model.Reaction, error) {
	start := time.Now()

	result, err := s.ReactionStore.GetForPost(postID, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ReactionStore.GetForPost")
	// event.Add("params", fmt.Sprintf("%v", []any{postID, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerReactionStore) GetForPostSince(postId string, since int64, excludeRemoteId string, inclDeleted bool) ([]*model.Reaction, error) {
	start := time.Now()

	result, err := s.ReactionStore.GetForPostSince(postId, since, excludeRemoteId, inclDeleted)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ReactionStore.GetForPostSince")
	// event.Add("params", fmt.Sprintf("%v", []any{postId, since, excludeRemoteId, inclDeleted}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerReactionStore) GetTopForTeamSince(teamID string, userID string, since int64, offset int, limit int) (*model.TopReactionList, error) {
	start := time.Now()

	result, err := s.ReactionStore.GetTopForTeamSince(teamID, userID, since, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ReactionStore.GetTopForTeamSince")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID, since, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerReactionStore) GetTopForUserSince(userID string, teamID string, since int64, offset int, limit int) (*model.TopReactionList, error) {
	start := time.Now()

	result, err := s.ReactionStore.GetTopForUserSince(userID, teamID, since, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ReactionStore.GetTopForUserSince")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamID, since, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerReactionStore) PermanentDeleteBatch(endTime int64, limit int64) (int64, error) {
	start := time.Now()

	result, err := s.ReactionStore.PermanentDeleteBatch(endTime, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ReactionStore.PermanentDeleteBatch")
	// event.Add("params", fmt.Sprintf("%v", []any{endTime, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerReactionStore) Save(reaction *model.Reaction) (*model.Reaction, error) {
	start := time.Now()

	result, err := s.ReactionStore.Save(reaction)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ReactionStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{reaction}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRemoteClusterStore) Delete(remoteClusterId string) (bool, error) {
	start := time.Now()

	result, err := s.RemoteClusterStore.Delete(remoteClusterId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RemoteClusterStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{remoteClusterId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRemoteClusterStore) Get(remoteClusterId string) (*model.RemoteCluster, error) {
	start := time.Now()

	result, err := s.RemoteClusterStore.Get(remoteClusterId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RemoteClusterStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{remoteClusterId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRemoteClusterStore) GetAll(filter model.RemoteClusterQueryFilter) ([]*model.RemoteCluster, error) {
	start := time.Now()

	result, err := s.RemoteClusterStore.GetAll(filter)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RemoteClusterStore.GetAll")
	// event.Add("params", fmt.Sprintf("%v", []any{filter}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRemoteClusterStore) Save(rc *model.RemoteCluster) (*model.RemoteCluster, error) {
	start := time.Now()

	result, err := s.RemoteClusterStore.Save(rc)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RemoteClusterStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{rc}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRemoteClusterStore) SetLastPingAt(remoteClusterId string) error {
	start := time.Now()

	err := s.RemoteClusterStore.SetLastPingAt(remoteClusterId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RemoteClusterStore.SetLastPingAt")
	// event.Add("params", fmt.Sprintf("%v", []any{remoteClusterId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerRemoteClusterStore) Update(rc *model.RemoteCluster) (*model.RemoteCluster, error) {
	start := time.Now()

	result, err := s.RemoteClusterStore.Update(rc)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RemoteClusterStore.Update")
	// event.Add("params", fmt.Sprintf("%v", []any{rc}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRemoteClusterStore) UpdateTopics(remoteClusterId string, topics string) (*model.RemoteCluster, error) {
	start := time.Now()

	result, err := s.RemoteClusterStore.UpdateTopics(remoteClusterId, topics)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RemoteClusterStore.UpdateTopics")
	// event.Add("params", fmt.Sprintf("%v", []any{remoteClusterId, topics}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRetentionPolicyStore) AddChannels(policyId string, channelIds []string) error {
	start := time.Now()

	err := s.RetentionPolicyStore.AddChannels(policyId, channelIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.AddChannels")
	// event.Add("params", fmt.Sprintf("%v", []any{policyId, channelIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerRetentionPolicyStore) AddTeams(policyId string, teamIds []string) error {
	start := time.Now()

	err := s.RetentionPolicyStore.AddTeams(policyId, teamIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.AddTeams")
	// event.Add("params", fmt.Sprintf("%v", []any{policyId, teamIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerRetentionPolicyStore) Delete(id string) error {
	start := time.Now()

	err := s.RetentionPolicyStore.Delete(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerRetentionPolicyStore) DeleteOrphanedRows(limit int) (int64, error) {
	start := time.Now()

	result, err := s.RetentionPolicyStore.DeleteOrphanedRows(limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.DeleteOrphanedRows")
	// event.Add("params", fmt.Sprintf("%v", []any{limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRetentionPolicyStore) Get(id string) (*model.RetentionPolicyWithTeamAndChannelCounts, error) {
	start := time.Now()

	result, err := s.RetentionPolicyStore.Get(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRetentionPolicyStore) GetAll(offset int, limit int) ([]*model.RetentionPolicyWithTeamAndChannelCounts, error) {
	start := time.Now()

	result, err := s.RetentionPolicyStore.GetAll(offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.GetAll")
	// event.Add("params", fmt.Sprintf("%v", []any{offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRetentionPolicyStore) GetChannelPoliciesCountForUser(userID string) (int64, error) {
	start := time.Now()

	result, err := s.RetentionPolicyStore.GetChannelPoliciesCountForUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.GetChannelPoliciesCountForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRetentionPolicyStore) GetChannelPoliciesForUser(userID string, offset int, limit int) ([]*model.RetentionPolicyForChannel, error) {
	start := time.Now()

	result, err := s.RetentionPolicyStore.GetChannelPoliciesForUser(userID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.GetChannelPoliciesForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRetentionPolicyStore) GetChannels(policyId string, offset int, limit int) (model.ChannelListWithTeamData, error) {
	start := time.Now()

	result, err := s.RetentionPolicyStore.GetChannels(policyId, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.GetChannels")
	// event.Add("params", fmt.Sprintf("%v", []any{policyId, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRetentionPolicyStore) GetChannelsCount(policyId string) (int64, error) {
	start := time.Now()

	result, err := s.RetentionPolicyStore.GetChannelsCount(policyId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.GetChannelsCount")
	// event.Add("params", fmt.Sprintf("%v", []any{policyId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRetentionPolicyStore) GetCount() (int64, error) {
	start := time.Now()

	result, err := s.RetentionPolicyStore.GetCount()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.GetCount")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRetentionPolicyStore) GetTeamPoliciesCountForUser(userID string) (int64, error) {
	start := time.Now()

	result, err := s.RetentionPolicyStore.GetTeamPoliciesCountForUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.GetTeamPoliciesCountForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRetentionPolicyStore) GetTeamPoliciesForUser(userID string, offset int, limit int) ([]*model.RetentionPolicyForTeam, error) {
	start := time.Now()

	result, err := s.RetentionPolicyStore.GetTeamPoliciesForUser(userID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.GetTeamPoliciesForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRetentionPolicyStore) GetTeams(policyId string, offset int, limit int) ([]*model.Team, error) {
	start := time.Now()

	result, err := s.RetentionPolicyStore.GetTeams(policyId, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.GetTeams")
	// event.Add("params", fmt.Sprintf("%v", []any{policyId, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRetentionPolicyStore) GetTeamsCount(policyId string) (int64, error) {
	start := time.Now()

	result, err := s.RetentionPolicyStore.GetTeamsCount(policyId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.GetTeamsCount")
	// event.Add("params", fmt.Sprintf("%v", []any{policyId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRetentionPolicyStore) Patch(patch *model.RetentionPolicyWithTeamAndChannelIDs) (*model.RetentionPolicyWithTeamAndChannelCounts, error) {
	start := time.Now()

	result, err := s.RetentionPolicyStore.Patch(patch)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.Patch")
	// event.Add("params", fmt.Sprintf("%v", []any{patch}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRetentionPolicyStore) RemoveChannels(policyId string, channelIds []string) error {
	start := time.Now()

	err := s.RetentionPolicyStore.RemoveChannels(policyId, channelIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.RemoveChannels")
	// event.Add("params", fmt.Sprintf("%v", []any{policyId, channelIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerRetentionPolicyStore) RemoveTeams(policyId string, teamIds []string) error {
	start := time.Now()

	err := s.RetentionPolicyStore.RemoveTeams(policyId, teamIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.RemoveTeams")
	// event.Add("params", fmt.Sprintf("%v", []any{policyId, teamIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerRetentionPolicyStore) Save(policy *model.RetentionPolicyWithTeamAndChannelIDs) (*model.RetentionPolicyWithTeamAndChannelCounts, error) {
	start := time.Now()

	result, err := s.RetentionPolicyStore.Save(policy)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RetentionPolicyStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{policy}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRoleStore) AllChannelSchemeRoles() ([]*model.Role, error) {
	start := time.Now()

	result, err := s.RoleStore.AllChannelSchemeRoles()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RoleStore.AllChannelSchemeRoles")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRoleStore) ChannelHigherScopedPermissions(roleNames []string) (map[string]*model.RolePermissions, error) {
	start := time.Now()

	result, err := s.RoleStore.ChannelHigherScopedPermissions(roleNames)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RoleStore.ChannelHigherScopedPermissions")
	// event.Add("params", fmt.Sprintf("%v", []any{roleNames}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRoleStore) ChannelRolesUnderTeamRole(roleName string) ([]*model.Role, error) {
	start := time.Now()

	result, err := s.RoleStore.ChannelRolesUnderTeamRole(roleName)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RoleStore.ChannelRolesUnderTeamRole")
	// event.Add("params", fmt.Sprintf("%v", []any{roleName}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRoleStore) Delete(roleID string) (*model.Role, error) {
	start := time.Now()

	result, err := s.RoleStore.Delete(roleID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RoleStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{roleID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRoleStore) Get(roleID string) (*model.Role, error) {
	start := time.Now()

	result, err := s.RoleStore.Get(roleID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RoleStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{roleID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRoleStore) GetAll() ([]*model.Role, error) {
	start := time.Now()

	result, err := s.RoleStore.GetAll()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RoleStore.GetAll")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRoleStore) GetByName(ctx context.Context, name string) (*model.Role, error) {
	start := time.Now()

	result, err := s.RoleStore.GetByName(ctx, name)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RoleStore.GetByName")
	// event.Add("params", fmt.Sprintf("%v", []any{ctx, name}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRoleStore) GetByNames(names []string) ([]*model.Role, error) {
	start := time.Now()

	result, err := s.RoleStore.GetByNames(names)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RoleStore.GetByNames")
	// event.Add("params", fmt.Sprintf("%v", []any{names}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerRoleStore) PermanentDeleteAll() error {
	start := time.Now()

	err := s.RoleStore.PermanentDeleteAll()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RoleStore.PermanentDeleteAll")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerRoleStore) Save(role *model.Role) (*model.Role, error) {
	start := time.Now()

	result, err := s.RoleStore.Save(role)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "RoleStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{role}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSchemeStore) CountByScope(scope string) (int64, error) {
	start := time.Now()

	result, err := s.SchemeStore.CountByScope(scope)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SchemeStore.CountByScope")
	// event.Add("params", fmt.Sprintf("%v", []any{scope}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSchemeStore) CountWithoutPermission(scope string, permissionID string, roleScope model.RoleScope, roleType model.RoleType) (int64, error) {
	start := time.Now()

	result, err := s.SchemeStore.CountWithoutPermission(scope, permissionID, roleScope, roleType)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SchemeStore.CountWithoutPermission")
	// event.Add("params", fmt.Sprintf("%v", []any{scope, permissionID, roleScope, roleType}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSchemeStore) Delete(schemeID string) (*model.Scheme, error) {
	start := time.Now()

	result, err := s.SchemeStore.Delete(schemeID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SchemeStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{schemeID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSchemeStore) Get(schemeID string) (*model.Scheme, error) {
	start := time.Now()

	result, err := s.SchemeStore.Get(schemeID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SchemeStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{schemeID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSchemeStore) GetAllPage(scope string, offset int, limit int) ([]*model.Scheme, error) {
	start := time.Now()

	result, err := s.SchemeStore.GetAllPage(scope, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SchemeStore.GetAllPage")
	// event.Add("params", fmt.Sprintf("%v", []any{scope, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSchemeStore) GetByName(schemeName string) (*model.Scheme, error) {
	start := time.Now()

	result, err := s.SchemeStore.GetByName(schemeName)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SchemeStore.GetByName")
	// event.Add("params", fmt.Sprintf("%v", []any{schemeName}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSchemeStore) PermanentDeleteAll() error {
	start := time.Now()

	err := s.SchemeStore.PermanentDeleteAll()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SchemeStore.PermanentDeleteAll")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSchemeStore) Save(scheme *model.Scheme) (*model.Scheme, error) {
	start := time.Now()

	result, err := s.SchemeStore.Save(scheme)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SchemeStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{scheme}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSessionStore) AnalyticsSessionCount() (int64, error) {
	start := time.Now()

	result, err := s.SessionStore.AnalyticsSessionCount()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.AnalyticsSessionCount")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSessionStore) Cleanup(expiryTime int64, batchSize int64) error {
	start := time.Now()

	err := s.SessionStore.Cleanup(expiryTime, batchSize)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.Cleanup")
	// event.Add("params", fmt.Sprintf("%v", []any{expiryTime, batchSize}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSessionStore) Get(ctx context.Context, sessionIDOrToken string) (*model.Session, error) {
	start := time.Now()

	result, err := s.SessionStore.Get(ctx, sessionIDOrToken)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{ctx, sessionIDOrToken}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSessionStore) GetLastSessionRowCreateAt() (int64, error) {
	start := time.Now()

	result, err := s.SessionStore.GetLastSessionRowCreateAt()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.GetLastSessionRowCreateAt")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSessionStore) GetSessions(userID string) ([]*model.Session, error) {
	start := time.Now()

	result, err := s.SessionStore.GetSessions(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.GetSessions")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSessionStore) GetSessionsExpired(thresholdMillis int64, mobileOnly bool, unnotifiedOnly bool) ([]*model.Session, error) {
	start := time.Now()

	result, err := s.SessionStore.GetSessionsExpired(thresholdMillis, mobileOnly, unnotifiedOnly)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.GetSessionsExpired")
	// event.Add("params", fmt.Sprintf("%v", []any{thresholdMillis, mobileOnly, unnotifiedOnly}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSessionStore) GetSessionsWithActiveDeviceIds(userID string) ([]*model.Session, error) {
	start := time.Now()

	result, err := s.SessionStore.GetSessionsWithActiveDeviceIds(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.GetSessionsWithActiveDeviceIds")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSessionStore) PermanentDeleteSessionsByUser(teamID string) error {
	start := time.Now()

	err := s.SessionStore.PermanentDeleteSessionsByUser(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.PermanentDeleteSessionsByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSessionStore) Remove(sessionIDOrToken string) error {
	start := time.Now()

	err := s.SessionStore.Remove(sessionIDOrToken)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.Remove")
	// event.Add("params", fmt.Sprintf("%v", []any{sessionIDOrToken}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSessionStore) RemoveAllSessions() error {
	start := time.Now()

	err := s.SessionStore.RemoveAllSessions()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.RemoveAllSessions")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSessionStore) Save(session *model.Session) (*model.Session, error) {
	start := time.Now()

	result, err := s.SessionStore.Save(session)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{session}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSessionStore) UpdateDeviceId(id string, deviceID string, expiresAt int64) (string, error) {
	start := time.Now()

	result, err := s.SessionStore.UpdateDeviceId(id, deviceID, expiresAt)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.UpdateDeviceId")
	// event.Add("params", fmt.Sprintf("%v", []any{id, deviceID, expiresAt}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSessionStore) UpdateExpiredNotify(sessionid string, notified bool) error {
	start := time.Now()

	err := s.SessionStore.UpdateExpiredNotify(sessionid, notified)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.UpdateExpiredNotify")
	// event.Add("params", fmt.Sprintf("%v", []any{sessionid, notified}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSessionStore) UpdateExpiresAt(sessionID string, timestamp int64) error {
	start := time.Now()

	err := s.SessionStore.UpdateExpiresAt(sessionID, timestamp)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.UpdateExpiresAt")
	// event.Add("params", fmt.Sprintf("%v", []any{sessionID, timestamp}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSessionStore) UpdateLastActivityAt(sessionID string, timestamp int64) error {
	start := time.Now()

	err := s.SessionStore.UpdateLastActivityAt(sessionID, timestamp)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.UpdateLastActivityAt")
	// event.Add("params", fmt.Sprintf("%v", []any{sessionID, timestamp}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSessionStore) UpdateProps(session *model.Session) error {
	start := time.Now()

	err := s.SessionStore.UpdateProps(session)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.UpdateProps")
	// event.Add("params", fmt.Sprintf("%v", []any{session}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSessionStore) UpdateRoles(userID string, roles string) (string, error) {
	start := time.Now()

	result, err := s.SessionStore.UpdateRoles(userID, roles)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SessionStore.UpdateRoles")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, roles}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) Delete(channelId string) (bool, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.Delete(channelId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{channelId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) DeleteRemote(remoteId string) (bool, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.DeleteRemote(remoteId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.DeleteRemote")
	// event.Add("params", fmt.Sprintf("%v", []any{remoteId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) Get(channelId string) (*model.SharedChannel, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.Get(channelId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{channelId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) GetAll(offset int, limit int, opts model.SharedChannelFilterOpts) ([]*model.SharedChannel, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.GetAll(offset, limit, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.GetAll")
	// event.Add("params", fmt.Sprintf("%v", []any{offset, limit, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) GetAllCount(opts model.SharedChannelFilterOpts) (int64, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.GetAllCount(opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.GetAllCount")
	// event.Add("params", fmt.Sprintf("%v", []any{opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) GetAttachment(fileId string, remoteId string) (*model.SharedChannelAttachment, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.GetAttachment(fileId, remoteId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.GetAttachment")
	// event.Add("params", fmt.Sprintf("%v", []any{fileId, remoteId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) GetRemote(id string) (*model.SharedChannelRemote, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.GetRemote(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.GetRemote")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) GetRemoteByIds(channelId string, remoteId string) (*model.SharedChannelRemote, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.GetRemoteByIds(channelId, remoteId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.GetRemoteByIds")
	// event.Add("params", fmt.Sprintf("%v", []any{channelId, remoteId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) GetRemoteForUser(remoteId string, userId string) (*model.RemoteCluster, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.GetRemoteForUser(remoteId, userId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.GetRemoteForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{remoteId, userId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) GetRemotes(opts model.SharedChannelRemoteFilterOpts) ([]*model.SharedChannelRemote, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.GetRemotes(opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.GetRemotes")
	// event.Add("params", fmt.Sprintf("%v", []any{opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) GetRemotesStatus(channelId string) ([]*model.SharedChannelRemoteStatus, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.GetRemotesStatus(channelId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.GetRemotesStatus")
	// event.Add("params", fmt.Sprintf("%v", []any{channelId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) GetSingleUser(userID string, channelID string, remoteID string) (*model.SharedChannelUser, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.GetSingleUser(userID, channelID, remoteID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.GetSingleUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, channelID, remoteID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) GetUsersForSync(filter model.GetUsersForSyncFilter) ([]*model.User, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.GetUsersForSync(filter)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.GetUsersForSync")
	// event.Add("params", fmt.Sprintf("%v", []any{filter}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) GetUsersForUser(userID string) ([]*model.SharedChannelUser, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.GetUsersForUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.GetUsersForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) HasChannel(channelID string) (bool, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.HasChannel(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.HasChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) HasRemote(channelID string, remoteId string) (bool, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.HasRemote(channelID, remoteId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.HasRemote")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, remoteId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) Save(sc *model.SharedChannel) (*model.SharedChannel, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.Save(sc)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{sc}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) SaveAttachment(remote *model.SharedChannelAttachment) (*model.SharedChannelAttachment, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.SaveAttachment(remote)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.SaveAttachment")
	// event.Add("params", fmt.Sprintf("%v", []any{remote}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) SaveRemote(remote *model.SharedChannelRemote) (*model.SharedChannelRemote, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.SaveRemote(remote)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.SaveRemote")
	// event.Add("params", fmt.Sprintf("%v", []any{remote}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) SaveUser(remote *model.SharedChannelUser) (*model.SharedChannelUser, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.SaveUser(remote)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.SaveUser")
	// event.Add("params", fmt.Sprintf("%v", []any{remote}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) Update(sc *model.SharedChannel) (*model.SharedChannel, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.Update(sc)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.Update")
	// event.Add("params", fmt.Sprintf("%v", []any{sc}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) UpdateAttachmentLastSyncAt(id string, syncTime int64) error {
	start := time.Now()

	err := s.SharedChannelStore.UpdateAttachmentLastSyncAt(id, syncTime)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.UpdateAttachmentLastSyncAt")
	// event.Add("params", fmt.Sprintf("%v", []any{id, syncTime}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSharedChannelStore) UpdateRemote(remote *model.SharedChannelRemote) (*model.SharedChannelRemote, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.UpdateRemote(remote)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.UpdateRemote")
	// event.Add("params", fmt.Sprintf("%v", []any{remote}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSharedChannelStore) UpdateRemoteCursor(id string, cursor model.GetPostsSinceForSyncCursor) error {
	start := time.Now()

	err := s.SharedChannelStore.UpdateRemoteCursor(id, cursor)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.UpdateRemoteCursor")
	// event.Add("params", fmt.Sprintf("%v", []any{id, cursor}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSharedChannelStore) UpdateUserLastSyncAt(userID string, channelID string, remoteID string) error {
	start := time.Now()

	err := s.SharedChannelStore.UpdateUserLastSyncAt(userID, channelID, remoteID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.UpdateUserLastSyncAt")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, channelID, remoteID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSharedChannelStore) UpsertAttachment(remote *model.SharedChannelAttachment) (string, error) {
	start := time.Now()

	result, err := s.SharedChannelStore.UpsertAttachment(remote)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SharedChannelStore.UpsertAttachment")
	// event.Add("params", fmt.Sprintf("%v", []any{remote}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerStatusStore) Get(userID string) (*model.Status, error) {
	start := time.Now()

	result, err := s.StatusStore.Get(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "StatusStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerStatusStore) GetByIds(userIds []string) ([]*model.Status, error) {
	start := time.Now()

	result, err := s.StatusStore.GetByIds(userIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "StatusStore.GetByIds")
	// event.Add("params", fmt.Sprintf("%v", []any{userIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerStatusStore) GetTotalActiveUsersCount() (int64, error) {
	start := time.Now()

	result, err := s.StatusStore.GetTotalActiveUsersCount()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "StatusStore.GetTotalActiveUsersCount")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerStatusStore) ResetAll() error {
	start := time.Now()

	err := s.StatusStore.ResetAll()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "StatusStore.ResetAll")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerStatusStore) SaveOrUpdate(status *model.Status) error {
	start := time.Now()

	err := s.StatusStore.SaveOrUpdate(status)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "StatusStore.SaveOrUpdate")
	// event.Add("params", fmt.Sprintf("%v", []any{status}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerStatusStore) UpdateExpiredDNDStatuses() ([]*model.Status, error) {
	start := time.Now()

	result, err := s.StatusStore.UpdateExpiredDNDStatuses()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "StatusStore.UpdateExpiredDNDStatuses")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerStatusStore) UpdateLastActivityAt(userID string, lastActivityAt int64) error {
	start := time.Now()

	err := s.StatusStore.UpdateLastActivityAt(userID, lastActivityAt)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "StatusStore.UpdateLastActivityAt")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, lastActivityAt}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSystemStore) Get() (model.StringMap, error) {
	start := time.Now()

	result, err := s.SystemStore.Get()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SystemStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSystemStore) GetByName(name string) (*model.System, error) {
	start := time.Now()

	result, err := s.SystemStore.GetByName(name)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SystemStore.GetByName")
	// event.Add("params", fmt.Sprintf("%v", []any{name}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSystemStore) InsertIfExists(system *model.System) (*model.System, error) {
	start := time.Now()

	result, err := s.SystemStore.InsertIfExists(system)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SystemStore.InsertIfExists")
	// event.Add("params", fmt.Sprintf("%v", []any{system}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSystemStore) PermanentDeleteByName(name string) (*model.System, error) {
	start := time.Now()

	result, err := s.SystemStore.PermanentDeleteByName(name)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SystemStore.PermanentDeleteByName")
	// event.Add("params", fmt.Sprintf("%v", []any{name}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerSystemStore) Save(system *model.System) error {
	start := time.Now()

	err := s.SystemStore.Save(system)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SystemStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{system}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSystemStore) SaveOrUpdate(system *model.System) error {
	start := time.Now()

	err := s.SystemStore.SaveOrUpdate(system)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SystemStore.SaveOrUpdate")
	// event.Add("params", fmt.Sprintf("%v", []any{system}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSystemStore) SaveOrUpdateWithWarnMetricHandling(system *model.System) error {
	start := time.Now()

	err := s.SystemStore.SaveOrUpdateWithWarnMetricHandling(system)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SystemStore.SaveOrUpdateWithWarnMetricHandling")
	// event.Add("params", fmt.Sprintf("%v", []any{system}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerSystemStore) Update(system *model.System) error {
	start := time.Now()

	err := s.SystemStore.Update(system)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "SystemStore.Update")
	// event.Add("params", fmt.Sprintf("%v", []any{system}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerTeamStore) AnalyticsGetTeamCountForScheme(schemeID string) (int64, error) {
	start := time.Now()

	result, err := s.TeamStore.AnalyticsGetTeamCountForScheme(schemeID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.AnalyticsGetTeamCountForScheme")
	// event.Add("params", fmt.Sprintf("%v", []any{schemeID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) AnalyticsTeamCount(opts *model.TeamSearch) (int64, error) {
	start := time.Now()

	result, err := s.TeamStore.AnalyticsTeamCount(opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.AnalyticsTeamCount")
	// event.Add("params", fmt.Sprintf("%v", []any{opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) ClearAllCustomRoleAssignments() error {
	start := time.Now()

	err := s.TeamStore.ClearAllCustomRoleAssignments()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.ClearAllCustomRoleAssignments")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerTeamStore) ClearCaches() {
	start := time.Now()

	s.TeamStore.ClearCaches()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.ClearCaches")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerTeamStore) Get(id string) (*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.Get(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetActiveMemberCount(teamID string, restrictions *model.ViewUsersRestrictions) (int64, error) {
	start := time.Now()

	result, err := s.TeamStore.GetActiveMemberCount(teamID, restrictions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetActiveMemberCount")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, restrictions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetAll() ([]*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.GetAll()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetAll")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetAllForExportAfter(limit int, afterID string) ([]*model.TeamForExport, error) {
	start := time.Now()

	result, err := s.TeamStore.GetAllForExportAfter(limit, afterID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetAllForExportAfter")
	// event.Add("params", fmt.Sprintf("%v", []any{limit, afterID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetAllPage(offset int, limit int, opts *model.TeamSearch) ([]*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.GetAllPage(offset, limit, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetAllPage")
	// event.Add("params", fmt.Sprintf("%v", []any{offset, limit, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetAllPrivateTeamListing() ([]*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.GetAllPrivateTeamListing()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetAllPrivateTeamListing")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetAllTeamListing() ([]*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.GetAllTeamListing()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetAllTeamListing")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetByEmptyInviteID() ([]*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.GetByEmptyInviteID()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetByEmptyInviteID")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetByInviteId(inviteID string) (*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.GetByInviteId(inviteID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetByInviteId")
	// event.Add("params", fmt.Sprintf("%v", []any{inviteID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetByName(name string) (*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.GetByName(name)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetByName")
	// event.Add("params", fmt.Sprintf("%v", []any{name}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetByNames(name []string) ([]*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.GetByNames(name)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetByNames")
	// event.Add("params", fmt.Sprintf("%v", []any{name}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetChannelUnreadsForAllTeams(excludeTeamID string, userID string) ([]*model.ChannelUnread, error) {
	start := time.Now()

	result, err := s.TeamStore.GetChannelUnreadsForAllTeams(excludeTeamID, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetChannelUnreadsForAllTeams")
	// event.Add("params", fmt.Sprintf("%v", []any{excludeTeamID, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetChannelUnreadsForTeam(teamID string, userID string) ([]*model.ChannelUnread, error) {
	start := time.Now()

	result, err := s.TeamStore.GetChannelUnreadsForTeam(teamID, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetChannelUnreadsForTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetCommonTeamIDsForTwoUsers(userID string, otherUserID string) ([]string, error) {
	start := time.Now()

	result, err := s.TeamStore.GetCommonTeamIDsForTwoUsers(userID, otherUserID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetCommonTeamIDsForTwoUsers")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, otherUserID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetMany(ids []string) ([]*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.GetMany(ids)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetMany")
	// event.Add("params", fmt.Sprintf("%v", []any{ids}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetMember(ctx context.Context, teamID string, userID string) (*model.TeamMember, error) {
	start := time.Now()

	result, err := s.TeamStore.GetMember(ctx, teamID, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetMember")
	// event.Add("params", fmt.Sprintf("%v", []any{ctx, teamID, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetMembers(teamID string, offset int, limit int, teamMembersGetOptions *model.TeamMembersGetOptions) ([]*model.TeamMember, error) {
	start := time.Now()

	result, err := s.TeamStore.GetMembers(teamID, offset, limit, teamMembersGetOptions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, offset, limit, teamMembersGetOptions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetMembersByIds(teamID string, userIds []string, restrictions *model.ViewUsersRestrictions) ([]*model.TeamMember, error) {
	start := time.Now()

	result, err := s.TeamStore.GetMembersByIds(teamID, userIds, restrictions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetMembersByIds")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userIds, restrictions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetNewTeamMembersSince(teamID string, since int64, offset int, limit int) (*model.NewTeamMembersList, int64, error) {
	start := time.Now()

	result, resultVar1, err := s.TeamStore.GetNewTeamMembersSince(teamID, since, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetNewTeamMembersSince")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, since, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, resultVar1, err
}

func (s *DebugBarLayerTeamStore) GetTeamMembersForExport(userID string) ([]*model.TeamMemberForExport, error) {
	start := time.Now()

	result, err := s.TeamStore.GetTeamMembersForExport(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetTeamMembersForExport")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetTeamsByScheme(schemeID string, offset int, limit int) ([]*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.GetTeamsByScheme(schemeID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetTeamsByScheme")
	// event.Add("params", fmt.Sprintf("%v", []any{schemeID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetTeamsByUserId(userID string) ([]*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.GetTeamsByUserId(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetTeamsByUserId")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetTeamsForUser(ctx context.Context, userID string, excludeTeamID string, includeDeleted bool) ([]*model.TeamMember, error) {
	start := time.Now()

	result, err := s.TeamStore.GetTeamsForUser(ctx, userID, excludeTeamID, includeDeleted)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetTeamsForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{ctx, userID, excludeTeamID, includeDeleted}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetTeamsForUserWithPagination(userID string, page int, perPage int) ([]*model.TeamMember, error) {
	start := time.Now()

	result, err := s.TeamStore.GetTeamsForUserWithPagination(userID, page, perPage)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetTeamsForUserWithPagination")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, page, perPage}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetTotalMemberCount(teamID string, restrictions *model.ViewUsersRestrictions) (int64, error) {
	start := time.Now()

	result, err := s.TeamStore.GetTotalMemberCount(teamID, restrictions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetTotalMemberCount")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, restrictions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GetUserTeamIds(userID string, allowFromCache bool) ([]string, error) {
	start := time.Now()

	result, err := s.TeamStore.GetUserTeamIds(userID, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GetUserTeamIds")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) GroupSyncedTeamCount() (int64, error) {
	start := time.Now()

	result, err := s.TeamStore.GroupSyncedTeamCount()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.GroupSyncedTeamCount")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) InvalidateAllTeamIdsForUser(userID string) {
	start := time.Now()

	s.TeamStore.InvalidateAllTeamIdsForUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.InvalidateAllTeamIdsForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerTeamStore) MigrateTeamMembers(fromTeamID string, fromUserID string) (map[string]string, error) {
	start := time.Now()

	result, err := s.TeamStore.MigrateTeamMembers(fromTeamID, fromUserID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.MigrateTeamMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{fromTeamID, fromUserID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) PermanentDelete(teamID string) error {
	start := time.Now()

	err := s.TeamStore.PermanentDelete(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.PermanentDelete")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerTeamStore) RemoveAllMembersByTeam(teamID string) error {
	start := time.Now()

	err := s.TeamStore.RemoveAllMembersByTeam(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.RemoveAllMembersByTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerTeamStore) RemoveAllMembersByUser(userID string) error {
	start := time.Now()

	err := s.TeamStore.RemoveAllMembersByUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.RemoveAllMembersByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerTeamStore) RemoveMember(teamID string, userID string) error {
	start := time.Now()

	err := s.TeamStore.RemoveMember(teamID, userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.RemoveMember")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerTeamStore) RemoveMembers(teamID string, userIds []string) error {
	start := time.Now()

	err := s.TeamStore.RemoveMembers(teamID, userIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.RemoveMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerTeamStore) ResetAllTeamSchemes() error {
	start := time.Now()

	err := s.TeamStore.ResetAllTeamSchemes()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.ResetAllTeamSchemes")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerTeamStore) Save(team *model.Team) (*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.Save(team)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{team}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) SaveMember(member *model.TeamMember, maxUsersPerTeam int) (*model.TeamMember, error) {
	start := time.Now()

	result, err := s.TeamStore.SaveMember(member, maxUsersPerTeam)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.SaveMember")
	// event.Add("params", fmt.Sprintf("%v", []any{member, maxUsersPerTeam}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) SaveMultipleMembers(members []*model.TeamMember, maxUsersPerTeam int) ([]*model.TeamMember, error) {
	start := time.Now()

	result, err := s.TeamStore.SaveMultipleMembers(members, maxUsersPerTeam)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.SaveMultipleMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{members, maxUsersPerTeam}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) SearchAll(opts *model.TeamSearch) ([]*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.SearchAll(opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.SearchAll")
	// event.Add("params", fmt.Sprintf("%v", []any{opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) SearchAllPaged(opts *model.TeamSearch) ([]*model.Team, int64, error) {
	start := time.Now()

	result, resultVar1, err := s.TeamStore.SearchAllPaged(opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.SearchAllPaged")
	// event.Add("params", fmt.Sprintf("%v", []any{opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, resultVar1, err
}

func (s *DebugBarLayerTeamStore) SearchOpen(opts *model.TeamSearch) ([]*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.SearchOpen(opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.SearchOpen")
	// event.Add("params", fmt.Sprintf("%v", []any{opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) SearchPrivate(opts *model.TeamSearch) ([]*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.SearchPrivate(opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.SearchPrivate")
	// event.Add("params", fmt.Sprintf("%v", []any{opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) Update(team *model.Team) (*model.Team, error) {
	start := time.Now()

	result, err := s.TeamStore.Update(team)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.Update")
	// event.Add("params", fmt.Sprintf("%v", []any{team}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) UpdateLastTeamIconUpdate(teamID string, curTime int64) error {
	start := time.Now()

	err := s.TeamStore.UpdateLastTeamIconUpdate(teamID, curTime)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.UpdateLastTeamIconUpdate")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, curTime}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerTeamStore) UpdateMember(member *model.TeamMember) (*model.TeamMember, error) {
	start := time.Now()

	result, err := s.TeamStore.UpdateMember(member)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.UpdateMember")
	// event.Add("params", fmt.Sprintf("%v", []any{member}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) UpdateMembersRole(teamID string, userIDs []string) error {
	start := time.Now()

	err := s.TeamStore.UpdateMembersRole(teamID, userIDs)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.UpdateMembersRole")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userIDs}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerTeamStore) UpdateMultipleMembers(members []*model.TeamMember) ([]*model.TeamMember, error) {
	start := time.Now()

	result, err := s.TeamStore.UpdateMultipleMembers(members)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.UpdateMultipleMembers")
	// event.Add("params", fmt.Sprintf("%v", []any{members}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTeamStore) UserBelongsToTeams(userID string, teamIds []string) (bool, error) {
	start := time.Now()

	result, err := s.TeamStore.UserBelongsToTeams(userID, teamIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TeamStore.UserBelongsToTeams")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTermsOfServiceStore) Get(id string, allowFromCache bool) (*model.TermsOfService, error) {
	start := time.Now()

	result, err := s.TermsOfServiceStore.Get(id, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TermsOfServiceStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{id, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTermsOfServiceStore) GetLatest(allowFromCache bool) (*model.TermsOfService, error) {
	start := time.Now()

	result, err := s.TermsOfServiceStore.GetLatest(allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TermsOfServiceStore.GetLatest")
	// event.Add("params", fmt.Sprintf("%v", []any{allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTermsOfServiceStore) Save(termsOfService *model.TermsOfService) (*model.TermsOfService, error) {
	start := time.Now()

	result, err := s.TermsOfServiceStore.Save(termsOfService)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TermsOfServiceStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{termsOfService}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) DeleteMembershipForUser(userId string, postID string) error {
	start := time.Now()

	err := s.ThreadStore.DeleteMembershipForUser(userId, postID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.DeleteMembershipForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userId, postID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerThreadStore) DeleteOrphanedRows(limit int) (int64, error) {
	start := time.Now()

	result, err := s.ThreadStore.DeleteOrphanedRows(limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.DeleteOrphanedRows")
	// event.Add("params", fmt.Sprintf("%v", []any{limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) Get(id string) (*model.Thread, error) {
	start := time.Now()

	result, err := s.ThreadStore.Get(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) GetMembershipForUser(userId string, postID string) (*model.ThreadMembership, error) {
	start := time.Now()

	result, err := s.ThreadStore.GetMembershipForUser(userId, postID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.GetMembershipForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userId, postID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) GetMembershipsForUser(userId string, teamID string) ([]*model.ThreadMembership, error) {
	start := time.Now()

	result, err := s.ThreadStore.GetMembershipsForUser(userId, teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.GetMembershipsForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userId, teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) GetTeamsUnreadForUser(userID string, teamIDs []string, includeUrgentMentionCount bool) (map[string]*model.TeamUnread, error) {
	start := time.Now()

	result, err := s.ThreadStore.GetTeamsUnreadForUser(userID, teamIDs, includeUrgentMentionCount)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.GetTeamsUnreadForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamIDs, includeUrgentMentionCount}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) GetThreadFollowers(threadID string, fetchOnlyActive bool) ([]string, error) {
	start := time.Now()

	result, err := s.ThreadStore.GetThreadFollowers(threadID, fetchOnlyActive)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.GetThreadFollowers")
	// event.Add("params", fmt.Sprintf("%v", []any{threadID, fetchOnlyActive}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) GetThreadForUser(threadMembership *model.ThreadMembership, extended bool, postPriorityIsEnabled bool) (*model.ThreadResponse, error) {
	start := time.Now()

	result, err := s.ThreadStore.GetThreadForUser(threadMembership, extended, postPriorityIsEnabled)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.GetThreadForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{threadMembership, extended, postPriorityIsEnabled}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) GetThreadUnreadReplyCount(threadMembership *model.ThreadMembership) (int64, error) {
	start := time.Now()

	result, err := s.ThreadStore.GetThreadUnreadReplyCount(threadMembership)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.GetThreadUnreadReplyCount")
	// event.Add("params", fmt.Sprintf("%v", []any{threadMembership}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) GetThreadsForUser(userId string, teamID string, opts model.GetUserThreadsOpts) ([]*model.ThreadResponse, error) {
	start := time.Now()

	result, err := s.ThreadStore.GetThreadsForUser(userId, teamID, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.GetThreadsForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userId, teamID, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) GetTopThreadsForTeamSince(teamID string, userID string, since int64, offset int, limit int) (*model.TopThreadList, error) {
	start := time.Now()

	result, err := s.ThreadStore.GetTopThreadsForTeamSince(teamID, userID, since, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.GetTopThreadsForTeamSince")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID, since, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) GetTopThreadsForUserSince(teamID string, userID string, since int64, offset int, limit int) (*model.TopThreadList, error) {
	start := time.Now()

	result, err := s.ThreadStore.GetTopThreadsForUserSince(teamID, userID, since, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.GetTopThreadsForUserSince")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID, since, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) GetTotalThreads(userId string, teamID string, opts model.GetUserThreadsOpts) (int64, error) {
	start := time.Now()

	result, err := s.ThreadStore.GetTotalThreads(userId, teamID, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.GetTotalThreads")
	// event.Add("params", fmt.Sprintf("%v", []any{userId, teamID, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) GetTotalUnreadMentions(userId string, teamID string, opts model.GetUserThreadsOpts) (int64, error) {
	start := time.Now()

	result, err := s.ThreadStore.GetTotalUnreadMentions(userId, teamID, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.GetTotalUnreadMentions")
	// event.Add("params", fmt.Sprintf("%v", []any{userId, teamID, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) GetTotalUnreadThreads(userId string, teamID string, opts model.GetUserThreadsOpts) (int64, error) {
	start := time.Now()

	result, err := s.ThreadStore.GetTotalUnreadThreads(userId, teamID, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.GetTotalUnreadThreads")
	// event.Add("params", fmt.Sprintf("%v", []any{userId, teamID, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) GetTotalUnreadUrgentMentions(userId string, teamID string, opts model.GetUserThreadsOpts) (int64, error) {
	start := time.Now()

	result, err := s.ThreadStore.GetTotalUnreadUrgentMentions(userId, teamID, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.GetTotalUnreadUrgentMentions")
	// event.Add("params", fmt.Sprintf("%v", []any{userId, teamID, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) MaintainMembership(userID string, postID string, opts store.ThreadMembershipOpts) (*model.ThreadMembership, error) {
	start := time.Now()

	result, err := s.ThreadStore.MaintainMembership(userID, postID, opts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.MaintainMembership")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, postID, opts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerThreadStore) MarkAllAsRead(userID string, threadIds []string) error {
	start := time.Now()

	err := s.ThreadStore.MarkAllAsRead(userID, threadIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.MarkAllAsRead")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, threadIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerThreadStore) MarkAllAsReadByChannels(userID string, channelIDs []string) error {
	start := time.Now()

	err := s.ThreadStore.MarkAllAsReadByChannels(userID, channelIDs)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.MarkAllAsReadByChannels")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, channelIDs}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerThreadStore) MarkAllAsReadByTeam(userID string, teamID string) error {
	start := time.Now()

	err := s.ThreadStore.MarkAllAsReadByTeam(userID, teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.MarkAllAsReadByTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerThreadStore) MarkAsRead(userID string, threadID string, timestamp int64) error {
	start := time.Now()

	err := s.ThreadStore.MarkAsRead(userID, threadID, timestamp)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.MarkAsRead")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, threadID, timestamp}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerThreadStore) PermanentDeleteBatchForRetentionPolicies(now int64, globalPolicyEndTime int64, limit int64, cursor model.RetentionPolicyCursor) (int64, model.RetentionPolicyCursor, error) {
	start := time.Now()

	result, resultVar1, err := s.ThreadStore.PermanentDeleteBatchForRetentionPolicies(now, globalPolicyEndTime, limit, cursor)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.PermanentDeleteBatchForRetentionPolicies")
	// event.Add("params", fmt.Sprintf("%v", []any{now, globalPolicyEndTime, limit, cursor}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, resultVar1, err
}

func (s *DebugBarLayerThreadStore) PermanentDeleteBatchThreadMembershipsForRetentionPolicies(now int64, globalPolicyEndTime int64, limit int64, cursor model.RetentionPolicyCursor) (int64, model.RetentionPolicyCursor, error) {
	start := time.Now()

	result, resultVar1, err := s.ThreadStore.PermanentDeleteBatchThreadMembershipsForRetentionPolicies(now, globalPolicyEndTime, limit, cursor)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.PermanentDeleteBatchThreadMembershipsForRetentionPolicies")
	// event.Add("params", fmt.Sprintf("%v", []any{now, globalPolicyEndTime, limit, cursor}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, resultVar1, err
}

func (s *DebugBarLayerThreadStore) UpdateMembership(membership *model.ThreadMembership) (*model.ThreadMembership, error) {
	start := time.Now()

	result, err := s.ThreadStore.UpdateMembership(membership)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "ThreadStore.UpdateMembership")
	// event.Add("params", fmt.Sprintf("%v", []any{membership}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTokenStore) Cleanup(expiryTime int64) {
	start := time.Now()

	s.TokenStore.Cleanup(expiryTime)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TokenStore.Cleanup")
	// event.Add("params", fmt.Sprintf("%v", []any{expiryTime}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerTokenStore) Delete(token string) error {
	start := time.Now()

	err := s.TokenStore.Delete(token)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TokenStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{token}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerTokenStore) GetAllTokensByType(tokenType string) ([]*model.Token, error) {
	start := time.Now()

	result, err := s.TokenStore.GetAllTokensByType(tokenType)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TokenStore.GetAllTokensByType")
	// event.Add("params", fmt.Sprintf("%v", []any{tokenType}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTokenStore) GetByToken(token string) (*model.Token, error) {
	start := time.Now()

	result, err := s.TokenStore.GetByToken(token)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TokenStore.GetByToken")
	// event.Add("params", fmt.Sprintf("%v", []any{token}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTokenStore) RemoveAllTokensByType(tokenType string) error {
	start := time.Now()

	err := s.TokenStore.RemoveAllTokensByType(tokenType)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TokenStore.RemoveAllTokensByType")
	// event.Add("params", fmt.Sprintf("%v", []any{tokenType}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerTokenStore) Save(recovery *model.Token) error {
	start := time.Now()

	err := s.TokenStore.Save(recovery)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TokenStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{recovery}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerTrueUpReviewStore) CreateTrueUpReviewStatusRecord(reviewStatus *model.TrueUpReviewStatus) (*model.TrueUpReviewStatus, error) {
	start := time.Now()

	result, err := s.TrueUpReviewStore.CreateTrueUpReviewStatusRecord(reviewStatus)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TrueUpReviewStore.CreateTrueUpReviewStatusRecord")
	// event.Add("params", fmt.Sprintf("%v", []any{reviewStatus}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTrueUpReviewStore) GetTrueUpReviewStatus(dueDate int64) (*model.TrueUpReviewStatus, error) {
	start := time.Now()

	result, err := s.TrueUpReviewStore.GetTrueUpReviewStatus(dueDate)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TrueUpReviewStore.GetTrueUpReviewStatus")
	// event.Add("params", fmt.Sprintf("%v", []any{dueDate}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerTrueUpReviewStore) Update(reviewStatus *model.TrueUpReviewStatus) (*model.TrueUpReviewStatus, error) {
	start := time.Now()

	result, err := s.TrueUpReviewStore.Update(reviewStatus)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "TrueUpReviewStore.Update")
	// event.Add("params", fmt.Sprintf("%v", []any{reviewStatus}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUploadSessionStore) Delete(id string) error {
	start := time.Now()

	err := s.UploadSessionStore.Delete(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UploadSessionStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUploadSessionStore) Get(ctx context.Context, id string) (*model.UploadSession, error) {
	start := time.Now()

	result, err := s.UploadSessionStore.Get(ctx, id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UploadSessionStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{ctx, id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUploadSessionStore) GetForUser(userID string) ([]*model.UploadSession, error) {
	start := time.Now()

	result, err := s.UploadSessionStore.GetForUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UploadSessionStore.GetForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUploadSessionStore) Save(session *model.UploadSession) (*model.UploadSession, error) {
	start := time.Now()

	result, err := s.UploadSessionStore.Save(session)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UploadSessionStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{session}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUploadSessionStore) Update(session *model.UploadSession) error {
	start := time.Now()

	err := s.UploadSessionStore.Update(session)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UploadSessionStore.Update")
	// event.Add("params", fmt.Sprintf("%v", []any{session}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserStore) AnalyticsActiveCount(timestamp int64, options model.UserCountOptions) (int64, error) {
	start := time.Now()

	result, err := s.UserStore.AnalyticsActiveCount(timestamp, options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.AnalyticsActiveCount")
	// event.Add("params", fmt.Sprintf("%v", []any{timestamp, options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) AnalyticsActiveCountForPeriod(startTime int64, endTime int64, options model.UserCountOptions) (int64, error) {
	start := time.Now()

	result, err := s.UserStore.AnalyticsActiveCountForPeriod(startTime, endTime, options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.AnalyticsActiveCountForPeriod")
	// event.Add("params", fmt.Sprintf("%v", []any{startTime, endTime, options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) AnalyticsGetExternalUsers(hostDomain string) (bool, error) {
	start := time.Now()

	result, err := s.UserStore.AnalyticsGetExternalUsers(hostDomain)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.AnalyticsGetExternalUsers")
	// event.Add("params", fmt.Sprintf("%v", []any{hostDomain}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) AnalyticsGetGuestCount() (int64, error) {
	start := time.Now()

	result, err := s.UserStore.AnalyticsGetGuestCount()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.AnalyticsGetGuestCount")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) AnalyticsGetInactiveUsersCount() (int64, error) {
	start := time.Now()

	result, err := s.UserStore.AnalyticsGetInactiveUsersCount()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.AnalyticsGetInactiveUsersCount")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) AnalyticsGetSystemAdminCount() (int64, error) {
	start := time.Now()

	result, err := s.UserStore.AnalyticsGetSystemAdminCount()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.AnalyticsGetSystemAdminCount")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) AutocompleteUsersInChannel(teamID string, channelID string, term string, options *model.UserSearchOptions) (*model.UserAutocompleteInChannel, error) {
	start := time.Now()

	result, err := s.UserStore.AutocompleteUsersInChannel(teamID, channelID, term, options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.AutocompleteUsersInChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, channelID, term, options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) ClearAllCustomRoleAssignments() error {
	start := time.Now()

	err := s.UserStore.ClearAllCustomRoleAssignments()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.ClearAllCustomRoleAssignments")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserStore) ClearCaches() {
	start := time.Now()

	s.UserStore.ClearCaches()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.ClearCaches")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerUserStore) Count(options model.UserCountOptions) (int64, error) {
	start := time.Now()

	result, err := s.UserStore.Count(options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.Count")
	// event.Add("params", fmt.Sprintf("%v", []any{options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) DeactivateGuests() ([]string, error) {
	start := time.Now()

	result, err := s.UserStore.DeactivateGuests()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.DeactivateGuests")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) DemoteUserToGuest(userID string) (*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.DemoteUserToGuest(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.DemoteUserToGuest")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) Get(ctx context.Context, id string) (*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.Get(ctx, id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{ctx, id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetAll() ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetAll()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetAll")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetAllAfter(limit int, afterID string) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetAllAfter(limit, afterID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetAllAfter")
	// event.Add("params", fmt.Sprintf("%v", []any{limit, afterID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetAllNotInAuthService(authServices []string) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetAllNotInAuthService(authServices)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetAllNotInAuthService")
	// event.Add("params", fmt.Sprintf("%v", []any{authServices}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetAllProfiles(options *model.UserGetOptions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetAllProfiles(options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetAllProfiles")
	// event.Add("params", fmt.Sprintf("%v", []any{options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetAllProfilesInChannel(ctx context.Context, channelID string, allowFromCache bool) (map[string]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetAllProfilesInChannel(ctx, channelID, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetAllProfilesInChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{ctx, channelID, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetAllUsingAuthService(authService string) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetAllUsingAuthService(authService)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetAllUsingAuthService")
	// event.Add("params", fmt.Sprintf("%v", []any{authService}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetAnyUnreadPostCountForChannel(userID string, channelID string) (int64, error) {
	start := time.Now()

	result, err := s.UserStore.GetAnyUnreadPostCountForChannel(userID, channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetAnyUnreadPostCountForChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetByAuth(authData *string, authService string) (*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetByAuth(authData, authService)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetByAuth")
	// event.Add("params", fmt.Sprintf("%v", []any{authData, authService}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetByEmail(email string) (*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetByEmail(email)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetByEmail")
	// event.Add("params", fmt.Sprintf("%v", []any{email}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetByUsername(username string) (*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetByUsername(username)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetByUsername")
	// event.Add("params", fmt.Sprintf("%v", []any{username}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetChannelGroupUsers(channelID string) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetChannelGroupUsers(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetChannelGroupUsers")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetEtagForAllProfiles() string {
	start := time.Now()

	result := s.UserStore.GetEtagForAllProfiles()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetEtagForAllProfiles")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result
}

func (s *DebugBarLayerUserStore) GetEtagForProfiles(teamID string) string {
	start := time.Now()

	result := s.UserStore.GetEtagForProfiles(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetEtagForProfiles")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result
}

func (s *DebugBarLayerUserStore) GetEtagForProfilesNotInTeam(teamID string) string {
	start := time.Now()

	result := s.UserStore.GetEtagForProfilesNotInTeam(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetEtagForProfilesNotInTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result
}

func (s *DebugBarLayerUserStore) GetFirstSystemAdminID() (string, error) {
	start := time.Now()

	result, err := s.UserStore.GetFirstSystemAdminID()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetFirstSystemAdminID")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetForLogin(loginID string, allowSignInWithUsername bool, allowSignInWithEmail bool) (*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetForLogin(loginID, allowSignInWithUsername, allowSignInWithEmail)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetForLogin")
	// event.Add("params", fmt.Sprintf("%v", []any{loginID, allowSignInWithUsername, allowSignInWithEmail}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetKnownUsers(userID string) ([]string, error) {
	start := time.Now()

	result, err := s.UserStore.GetKnownUsers(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetKnownUsers")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetMany(ctx context.Context, ids []string) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetMany(ctx, ids)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetMany")
	// event.Add("params", fmt.Sprintf("%v", []any{ctx, ids}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetNewUsersForTeam(teamID string, offset int, limit int, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetNewUsersForTeam(teamID, offset, limit, viewRestrictions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetNewUsersForTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, offset, limit, viewRestrictions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetProfileByGroupChannelIdsForUser(userID string, channelIds []string) (map[string][]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetProfileByGroupChannelIdsForUser(userID, channelIds)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetProfileByGroupChannelIdsForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, channelIds}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetProfileByIds(ctx context.Context, userIds []string, options *store.UserGetByIdsOpts, allowFromCache bool) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetProfileByIds(ctx, userIds, options, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetProfileByIds")
	// event.Add("params", fmt.Sprintf("%v", []any{ctx, userIds, options, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetProfiles(options *model.UserGetOptions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetProfiles(options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetProfiles")
	// event.Add("params", fmt.Sprintf("%v", []any{options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetProfilesByUsernames(usernames []string, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetProfilesByUsernames(usernames, viewRestrictions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetProfilesByUsernames")
	// event.Add("params", fmt.Sprintf("%v", []any{usernames, viewRestrictions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetProfilesInChannel(options *model.UserGetOptions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetProfilesInChannel(options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetProfilesInChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetProfilesInChannelByAdmin(options *model.UserGetOptions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetProfilesInChannelByAdmin(options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetProfilesInChannelByAdmin")
	// event.Add("params", fmt.Sprintf("%v", []any{options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetProfilesInChannelByStatus(options *model.UserGetOptions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetProfilesInChannelByStatus(options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetProfilesInChannelByStatus")
	// event.Add("params", fmt.Sprintf("%v", []any{options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetProfilesNotInChannel(teamID string, channelId string, groupConstrained bool, offset int, limit int, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetProfilesNotInChannel(teamID, channelId, groupConstrained, offset, limit, viewRestrictions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetProfilesNotInChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, channelId, groupConstrained, offset, limit, viewRestrictions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetProfilesNotInTeam(teamID string, groupConstrained bool, offset int, limit int, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetProfilesNotInTeam(teamID, groupConstrained, offset, limit, viewRestrictions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetProfilesNotInTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, groupConstrained, offset, limit, viewRestrictions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetProfilesWithoutTeam(options *model.UserGetOptions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetProfilesWithoutTeam(options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetProfilesWithoutTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetRecentlyActiveUsersForTeam(teamID string, offset int, limit int, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetRecentlyActiveUsersForTeam(teamID, offset, limit, viewRestrictions)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetRecentlyActiveUsersForTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, offset, limit, viewRestrictions}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetSystemAdminProfiles() (map[string]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetSystemAdminProfiles()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetSystemAdminProfiles")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetTeamGroupUsers(teamID string) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetTeamGroupUsers(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetTeamGroupUsers")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetUnreadCount(userID string, isCRTEnabled bool) (int64, error) {
	start := time.Now()

	result, err := s.UserStore.GetUnreadCount(userID, isCRTEnabled)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetUnreadCount")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, isCRTEnabled}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetUnreadCountForChannel(userID string, channelID string) (int64, error) {
	start := time.Now()

	result, err := s.UserStore.GetUnreadCountForChannel(userID, channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetUnreadCountForChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetUsersBatchForIndexing(startTime int64, startFileID string, limit int) ([]*model.UserForIndexing, error) {
	start := time.Now()

	result, err := s.UserStore.GetUsersBatchForIndexing(startTime, startFileID, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetUsersBatchForIndexing")
	// event.Add("params", fmt.Sprintf("%v", []any{startTime, startFileID, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) GetUsersWithInvalidEmails(page int, perPage int, restrictedDomains string) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.GetUsersWithInvalidEmails(page, perPage, restrictedDomains)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.GetUsersWithInvalidEmails")
	// event.Add("params", fmt.Sprintf("%v", []any{page, perPage, restrictedDomains}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) InferSystemInstallDate() (int64, error) {
	start := time.Now()

	result, err := s.UserStore.InferSystemInstallDate()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.InferSystemInstallDate")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) InsertUsers(users []*model.User) error {
	start := time.Now()

	err := s.UserStore.InsertUsers(users)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.InsertUsers")
	// event.Add("params", fmt.Sprintf("%v", []any{users}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserStore) InvalidateProfileCacheForUser(userID string) {
	start := time.Now()

	s.UserStore.InvalidateProfileCacheForUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.InvalidateProfileCacheForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerUserStore) InvalidateProfilesInChannelCache(channelID string) {
	start := time.Now()

	s.UserStore.InvalidateProfilesInChannelCache(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.InvalidateProfilesInChannelCache")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerUserStore) InvalidateProfilesInChannelCacheByUser(userID string) {
	start := time.Now()

	s.UserStore.InvalidateProfilesInChannelCacheByUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.InvalidateProfilesInChannelCacheByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerUserStore) IsEmpty(excludeBots bool) (bool, error) {
	start := time.Now()

	result, err := s.UserStore.IsEmpty(excludeBots)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.IsEmpty")
	// event.Add("params", fmt.Sprintf("%v", []any{excludeBots}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) PermanentDelete(userID string) error {
	start := time.Now()

	err := s.UserStore.PermanentDelete(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.PermanentDelete")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserStore) PromoteGuestToUser(userID string) error {
	start := time.Now()

	err := s.UserStore.PromoteGuestToUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.PromoteGuestToUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserStore) ResetAuthDataToEmailForUsers(service string, userIDs []string, includeDeleted bool, dryRun bool) (int, error) {
	start := time.Now()

	result, err := s.UserStore.ResetAuthDataToEmailForUsers(service, userIDs, includeDeleted, dryRun)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.ResetAuthDataToEmailForUsers")
	// event.Add("params", fmt.Sprintf("%v", []any{service, userIDs, includeDeleted, dryRun}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) ResetLastPictureUpdate(userID string) error {
	start := time.Now()

	err := s.UserStore.ResetLastPictureUpdate(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.ResetLastPictureUpdate")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserStore) Save(user *model.User) (*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.Save(user)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{user}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) Search(teamID string, term string, options *model.UserSearchOptions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.Search(teamID, term, options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.Search")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, term, options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) SearchInChannel(channelID string, term string, options *model.UserSearchOptions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.SearchInChannel(channelID, term, options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.SearchInChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, term, options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) SearchInGroup(groupID string, term string, options *model.UserSearchOptions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.SearchInGroup(groupID, term, options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.SearchInGroup")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, term, options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) SearchNotInChannel(teamID string, channelID string, term string, options *model.UserSearchOptions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.SearchNotInChannel(teamID, channelID, term, options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.SearchNotInChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, channelID, term, options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) SearchNotInGroup(groupID string, term string, options *model.UserSearchOptions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.SearchNotInGroup(groupID, term, options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.SearchNotInGroup")
	// event.Add("params", fmt.Sprintf("%v", []any{groupID, term, options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) SearchNotInTeam(notInTeamID string, term string, options *model.UserSearchOptions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.SearchNotInTeam(notInTeamID, term, options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.SearchNotInTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{notInTeamID, term, options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) SearchWithoutTeam(term string, options *model.UserSearchOptions) ([]*model.User, error) {
	start := time.Now()

	result, err := s.UserStore.SearchWithoutTeam(term, options)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.SearchWithoutTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{term, options}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) Update(user *model.User, allowRoleUpdate bool) (*model.UserUpdate, error) {
	start := time.Now()

	result, err := s.UserStore.Update(user, allowRoleUpdate)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.Update")
	// event.Add("params", fmt.Sprintf("%v", []any{user, allowRoleUpdate}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) UpdateAuthData(userID string, service string, authData *string, email string, resetMfa bool) (string, error) {
	start := time.Now()

	result, err := s.UserStore.UpdateAuthData(userID, service, authData, email, resetMfa)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.UpdateAuthData")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, service, authData, email, resetMfa}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) UpdateFailedPasswordAttempts(userID string, attempts int) error {
	start := time.Now()

	err := s.UserStore.UpdateFailedPasswordAttempts(userID, attempts)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.UpdateFailedPasswordAttempts")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, attempts}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserStore) UpdateLastPictureUpdate(userID string) error {
	start := time.Now()

	err := s.UserStore.UpdateLastPictureUpdate(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.UpdateLastPictureUpdate")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserStore) UpdateMfaActive(userID string, active bool) error {
	start := time.Now()

	err := s.UserStore.UpdateMfaActive(userID, active)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.UpdateMfaActive")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, active}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserStore) UpdateMfaSecret(userID string, secret string) error {
	start := time.Now()

	err := s.UserStore.UpdateMfaSecret(userID, secret)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.UpdateMfaSecret")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, secret}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserStore) UpdateNotifyProps(userID string, props map[string]string) error {
	start := time.Now()

	err := s.UserStore.UpdateNotifyProps(userID, props)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.UpdateNotifyProps")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, props}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserStore) UpdatePassword(userID string, newPassword string) error {
	start := time.Now()

	err := s.UserStore.UpdatePassword(userID, newPassword)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.UpdatePassword")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, newPassword}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserStore) UpdateUpdateAt(userID string) (int64, error) {
	start := time.Now()

	result, err := s.UserStore.UpdateUpdateAt(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.UpdateUpdateAt")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserStore) VerifyEmail(userID string, email string) (string, error) {
	start := time.Now()

	result, err := s.UserStore.VerifyEmail(userID, email)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserStore.VerifyEmail")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, email}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserAccessTokenStore) Delete(tokenID string) error {
	start := time.Now()

	err := s.UserAccessTokenStore.Delete(tokenID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserAccessTokenStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{tokenID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserAccessTokenStore) DeleteAllForUser(userID string) error {
	start := time.Now()

	err := s.UserAccessTokenStore.DeleteAllForUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserAccessTokenStore.DeleteAllForUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserAccessTokenStore) Get(tokenID string) (*model.UserAccessToken, error) {
	start := time.Now()

	result, err := s.UserAccessTokenStore.Get(tokenID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserAccessTokenStore.Get")
	// event.Add("params", fmt.Sprintf("%v", []any{tokenID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserAccessTokenStore) GetAll(offset int, limit int) ([]*model.UserAccessToken, error) {
	start := time.Now()

	result, err := s.UserAccessTokenStore.GetAll(offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserAccessTokenStore.GetAll")
	// event.Add("params", fmt.Sprintf("%v", []any{offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserAccessTokenStore) GetByToken(tokenString string) (*model.UserAccessToken, error) {
	start := time.Now()

	result, err := s.UserAccessTokenStore.GetByToken(tokenString)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserAccessTokenStore.GetByToken")
	// event.Add("params", fmt.Sprintf("%v", []any{tokenString}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserAccessTokenStore) GetByUser(userID string, page int, perPage int) ([]*model.UserAccessToken, error) {
	start := time.Now()

	result, err := s.UserAccessTokenStore.GetByUser(userID, page, perPage)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserAccessTokenStore.GetByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, page, perPage}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserAccessTokenStore) Save(token *model.UserAccessToken) (*model.UserAccessToken, error) {
	start := time.Now()

	result, err := s.UserAccessTokenStore.Save(token)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserAccessTokenStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{token}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserAccessTokenStore) Search(term string) ([]*model.UserAccessToken, error) {
	start := time.Now()

	result, err := s.UserAccessTokenStore.Search(term)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserAccessTokenStore.Search")
	// event.Add("params", fmt.Sprintf("%v", []any{term}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserAccessTokenStore) UpdateTokenDisable(tokenID string) error {
	start := time.Now()

	err := s.UserAccessTokenStore.UpdateTokenDisable(tokenID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserAccessTokenStore.UpdateTokenDisable")
	// event.Add("params", fmt.Sprintf("%v", []any{tokenID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserAccessTokenStore) UpdateTokenEnable(tokenID string) error {
	start := time.Now()

	err := s.UserAccessTokenStore.UpdateTokenEnable(tokenID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserAccessTokenStore.UpdateTokenEnable")
	// event.Add("params", fmt.Sprintf("%v", []any{tokenID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserTermsOfServiceStore) Delete(userID string, termsOfServiceId string) error {
	start := time.Now()

	err := s.UserTermsOfServiceStore.Delete(userID, termsOfServiceId)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserTermsOfServiceStore.Delete")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, termsOfServiceId}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerUserTermsOfServiceStore) GetByUser(userID string) (*model.UserTermsOfService, error) {
	start := time.Now()

	result, err := s.UserTermsOfServiceStore.GetByUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserTermsOfServiceStore.GetByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerUserTermsOfServiceStore) Save(userTermsOfService *model.UserTermsOfService) (*model.UserTermsOfService, error) {
	start := time.Now()

	result, err := s.UserTermsOfServiceStore.Save(userTermsOfService)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "UserTermsOfServiceStore.Save")
	// event.Add("params", fmt.Sprintf("%v", []any{userTermsOfService}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) AnalyticsIncomingCount(teamID string) (int64, error) {
	start := time.Now()

	result, err := s.WebhookStore.AnalyticsIncomingCount(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.AnalyticsIncomingCount")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) AnalyticsOutgoingCount(teamID string) (int64, error) {
	start := time.Now()

	result, err := s.WebhookStore.AnalyticsOutgoingCount(teamID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.AnalyticsOutgoingCount")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) ClearCaches() {
	start := time.Now()

	s.WebhookStore.ClearCaches()

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.ClearCaches")
	// event.Add("params", fmt.Sprintf("%v", []any{}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerWebhookStore) DeleteIncoming(webhookID string, timestamp int64) error {
	start := time.Now()

	err := s.WebhookStore.DeleteIncoming(webhookID, timestamp)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.DeleteIncoming")
	// event.Add("params", fmt.Sprintf("%v", []any{webhookID, timestamp}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerWebhookStore) DeleteOutgoing(webhookID string, timestamp int64) error {
	start := time.Now()

	err := s.WebhookStore.DeleteOutgoing(webhookID, timestamp)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.DeleteOutgoing")
	// event.Add("params", fmt.Sprintf("%v", []any{webhookID, timestamp}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerWebhookStore) GetIncoming(id string, allowFromCache bool) (*model.IncomingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.GetIncoming(id, allowFromCache)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.GetIncoming")
	// event.Add("params", fmt.Sprintf("%v", []any{id, allowFromCache}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) GetIncomingByChannel(channelID string) ([]*model.IncomingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.GetIncomingByChannel(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.GetIncomingByChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) GetIncomingByTeam(teamID string, offset int, limit int) ([]*model.IncomingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.GetIncomingByTeam(teamID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.GetIncomingByTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) GetIncomingByTeamByUser(teamID string, userID string, offset int, limit int) ([]*model.IncomingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.GetIncomingByTeamByUser(teamID, userID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.GetIncomingByTeamByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) GetIncomingList(offset int, limit int) ([]*model.IncomingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.GetIncomingList(offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.GetIncomingList")
	// event.Add("params", fmt.Sprintf("%v", []any{offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) GetIncomingListByUser(userID string, offset int, limit int) ([]*model.IncomingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.GetIncomingListByUser(userID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.GetIncomingListByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) GetOutgoing(id string) (*model.OutgoingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.GetOutgoing(id)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.GetOutgoing")
	// event.Add("params", fmt.Sprintf("%v", []any{id}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) GetOutgoingByChannel(channelID string, offset int, limit int) ([]*model.OutgoingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.GetOutgoingByChannel(channelID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.GetOutgoingByChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) GetOutgoingByChannelByUser(channelID string, userID string, offset int, limit int) ([]*model.OutgoingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.GetOutgoingByChannelByUser(channelID, userID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.GetOutgoingByChannelByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID, userID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) GetOutgoingByTeam(teamID string, offset int, limit int) ([]*model.OutgoingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.GetOutgoingByTeam(teamID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.GetOutgoingByTeam")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) GetOutgoingByTeamByUser(teamID string, userID string, offset int, limit int) ([]*model.OutgoingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.GetOutgoingByTeamByUser(teamID, userID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.GetOutgoingByTeamByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{teamID, userID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) GetOutgoingList(offset int, limit int) ([]*model.OutgoingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.GetOutgoingList(offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.GetOutgoingList")
	// event.Add("params", fmt.Sprintf("%v", []any{offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) GetOutgoingListByUser(userID string, offset int, limit int) ([]*model.OutgoingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.GetOutgoingListByUser(userID, offset, limit)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.GetOutgoingListByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID, offset, limit}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) InvalidateWebhookCache(webhook string) {
	start := time.Now()

	s.WebhookStore.InvalidateWebhookCache(webhook)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if true {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.InvalidateWebhookCache")
	// event.Add("params", fmt.Sprintf("%v", []any{webhook}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)

}

func (s *DebugBarLayerWebhookStore) PermanentDeleteIncomingByChannel(channelID string) error {
	start := time.Now()

	err := s.WebhookStore.PermanentDeleteIncomingByChannel(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.PermanentDeleteIncomingByChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerWebhookStore) PermanentDeleteIncomingByUser(userID string) error {
	start := time.Now()

	err := s.WebhookStore.PermanentDeleteIncomingByUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.PermanentDeleteIncomingByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerWebhookStore) PermanentDeleteOutgoingByChannel(channelID string) error {
	start := time.Now()

	err := s.WebhookStore.PermanentDeleteOutgoingByChannel(channelID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.PermanentDeleteOutgoingByChannel")
	// event.Add("params", fmt.Sprintf("%v", []any{channelID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerWebhookStore) PermanentDeleteOutgoingByUser(userID string) error {
	start := time.Now()

	err := s.WebhookStore.PermanentDeleteOutgoingByUser(userID)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.PermanentDeleteOutgoingByUser")
	// event.Add("params", fmt.Sprintf("%v", []any{userID}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return err
}

func (s *DebugBarLayerWebhookStore) SaveIncoming(webhook *model.IncomingWebhook) (*model.IncomingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.SaveIncoming(webhook)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.SaveIncoming")
	// event.Add("params", fmt.Sprintf("%v", []any{webhook}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) SaveOutgoing(webhook *model.OutgoingWebhook) (*model.OutgoingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.SaveOutgoing(webhook)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.SaveOutgoing")
	// event.Add("params", fmt.Sprintf("%v", []any{webhook}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) UpdateIncoming(webhook *model.IncomingWebhook) (*model.IncomingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.UpdateIncoming(webhook)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.UpdateIncoming")
	// event.Add("params", fmt.Sprintf("%v", []any{webhook}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayerWebhookStore) UpdateOutgoing(hook *model.OutgoingWebhook) (*model.OutgoingWebhook, error) {
	start := time.Now()

	result, err := s.WebhookStore.UpdateOutgoing(hook)

	elapsed := float64(time.Since(start)) / float64(time.Second)
	success := "false"
	if err == nil {
		success = "true"
	}

	event := model.NewWebSocketEvent("debug", "", "", s.Root.userID, nil, "")
	event.Add("time", model.GetMillis())
	event.Add("type", "store-call")
	event.Add("method", "WebhookStore.UpdateOutgoing")
	// event.Add("params", fmt.Sprintf("%v", []any{hook}))
	event.Add("success", success)
	event.Add("duration", elapsed)
	s.Root.eventPublish(event)
	return result, err
}

func (s *DebugBarLayer) Close() {
	s.Store.Close()
}

func (s *DebugBarLayer) DropAllTables() {
	s.Store.DropAllTables()
}

func (s *DebugBarLayer) LockToMaster() {
	s.Store.LockToMaster()
}

func (s *DebugBarLayer) MarkSystemRanUnitTests() {
	s.Store.MarkSystemRanUnitTests()
}

func (s *DebugBarLayer) SetContext(context context.Context) {
	s.Store.SetContext(context)
}

func (s *DebugBarLayer) TotalMasterDbConnections() int {
	return s.Store.TotalMasterDbConnections()
}

func (s *DebugBarLayer) TotalReadDbConnections() int {
	return s.Store.TotalReadDbConnections()
}

func (s *DebugBarLayer) TotalSearchDbConnections() int {
	return s.Store.TotalSearchDbConnections()
}

func (s *DebugBarLayer) UnlockFromMaster() {
	s.Store.UnlockFromMaster()
}

func (s *DebugBarLayer) SetCurrentUser(userID string) {
	s.userID = userID
}

func New(childStore store.Store, userID string, eventPublish func(event *model.WebSocketEvent)) *DebugBarLayer {
	newStore := DebugBarLayer{
		Store:        childStore,
		userID:       userID,
		eventPublish: eventPublish,
	}

	newStore.AuditStore = &DebugBarLayerAuditStore{AuditStore: childStore.Audit(), Root: &newStore}
	newStore.BotStore = &DebugBarLayerBotStore{BotStore: childStore.Bot(), Root: &newStore}
	newStore.ChannelStore = &DebugBarLayerChannelStore{ChannelStore: childStore.Channel(), Root: &newStore}
	newStore.ChannelMemberHistoryStore = &DebugBarLayerChannelMemberHistoryStore{ChannelMemberHistoryStore: childStore.ChannelMemberHistory(), Root: &newStore}
	newStore.ClusterDiscoveryStore = &DebugBarLayerClusterDiscoveryStore{ClusterDiscoveryStore: childStore.ClusterDiscovery(), Root: &newStore}
	newStore.CommandStore = &DebugBarLayerCommandStore{CommandStore: childStore.Command(), Root: &newStore}
	newStore.CommandWebhookStore = &DebugBarLayerCommandWebhookStore{CommandWebhookStore: childStore.CommandWebhook(), Root: &newStore}
	newStore.ComplianceStore = &DebugBarLayerComplianceStore{ComplianceStore: childStore.Compliance(), Root: &newStore}
	newStore.DraftStore = &DebugBarLayerDraftStore{DraftStore: childStore.Draft(), Root: &newStore}
	newStore.EmojiStore = &DebugBarLayerEmojiStore{EmojiStore: childStore.Emoji(), Root: &newStore}
	newStore.FileInfoStore = &DebugBarLayerFileInfoStore{FileInfoStore: childStore.FileInfo(), Root: &newStore}
	newStore.GroupStore = &DebugBarLayerGroupStore{GroupStore: childStore.Group(), Root: &newStore}
	newStore.JobStore = &DebugBarLayerJobStore{JobStore: childStore.Job(), Root: &newStore}
	newStore.LicenseStore = &DebugBarLayerLicenseStore{LicenseStore: childStore.License(), Root: &newStore}
	newStore.LinkMetadataStore = &DebugBarLayerLinkMetadataStore{LinkMetadataStore: childStore.LinkMetadata(), Root: &newStore}
	newStore.NotifyAdminStore = &DebugBarLayerNotifyAdminStore{NotifyAdminStore: childStore.NotifyAdmin(), Root: &newStore}
	newStore.OAuthStore = &DebugBarLayerOAuthStore{OAuthStore: childStore.OAuth(), Root: &newStore}
	newStore.PluginStore = &DebugBarLayerPluginStore{PluginStore: childStore.Plugin(), Root: &newStore}
	newStore.PostStore = &DebugBarLayerPostStore{PostStore: childStore.Post(), Root: &newStore}
	newStore.PostAcknowledgementStore = &DebugBarLayerPostAcknowledgementStore{PostAcknowledgementStore: childStore.PostAcknowledgement(), Root: &newStore}
	newStore.PostPriorityStore = &DebugBarLayerPostPriorityStore{PostPriorityStore: childStore.PostPriority(), Root: &newStore}
	newStore.PreferenceStore = &DebugBarLayerPreferenceStore{PreferenceStore: childStore.Preference(), Root: &newStore}
	newStore.ProductNoticesStore = &DebugBarLayerProductNoticesStore{ProductNoticesStore: childStore.ProductNotices(), Root: &newStore}
	newStore.ReactionStore = &DebugBarLayerReactionStore{ReactionStore: childStore.Reaction(), Root: &newStore}
	newStore.RemoteClusterStore = &DebugBarLayerRemoteClusterStore{RemoteClusterStore: childStore.RemoteCluster(), Root: &newStore}
	newStore.RetentionPolicyStore = &DebugBarLayerRetentionPolicyStore{RetentionPolicyStore: childStore.RetentionPolicy(), Root: &newStore}
	newStore.RoleStore = &DebugBarLayerRoleStore{RoleStore: childStore.Role(), Root: &newStore}
	newStore.SchemeStore = &DebugBarLayerSchemeStore{SchemeStore: childStore.Scheme(), Root: &newStore}
	newStore.SessionStore = &DebugBarLayerSessionStore{SessionStore: childStore.Session(), Root: &newStore}
	newStore.SharedChannelStore = &DebugBarLayerSharedChannelStore{SharedChannelStore: childStore.SharedChannel(), Root: &newStore}
	newStore.StatusStore = &DebugBarLayerStatusStore{StatusStore: childStore.Status(), Root: &newStore}
	newStore.SystemStore = &DebugBarLayerSystemStore{SystemStore: childStore.System(), Root: &newStore}
	newStore.TeamStore = &DebugBarLayerTeamStore{TeamStore: childStore.Team(), Root: &newStore}
	newStore.TermsOfServiceStore = &DebugBarLayerTermsOfServiceStore{TermsOfServiceStore: childStore.TermsOfService(), Root: &newStore}
	newStore.ThreadStore = &DebugBarLayerThreadStore{ThreadStore: childStore.Thread(), Root: &newStore}
	newStore.TokenStore = &DebugBarLayerTokenStore{TokenStore: childStore.Token(), Root: &newStore}
	newStore.TrueUpReviewStore = &DebugBarLayerTrueUpReviewStore{TrueUpReviewStore: childStore.TrueUpReview(), Root: &newStore}
	newStore.UploadSessionStore = &DebugBarLayerUploadSessionStore{UploadSessionStore: childStore.UploadSession(), Root: &newStore}
	newStore.UserStore = &DebugBarLayerUserStore{UserStore: childStore.User(), Root: &newStore}
	newStore.UserAccessTokenStore = &DebugBarLayerUserAccessTokenStore{UserAccessTokenStore: childStore.UserAccessToken(), Root: &newStore}
	newStore.UserTermsOfServiceStore = &DebugBarLayerUserTermsOfServiceStore{UserTermsOfServiceStore: childStore.UserTermsOfService(), Root: &newStore}
	newStore.WebhookStore = &DebugBarLayerWebhookStore{WebhookStore: childStore.Webhook(), Root: &newStore}
	return &newStore
}
