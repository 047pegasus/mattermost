// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost-server/v5/model"
	mock "github.com/stretchr/testify/mock"
)

// ThemeStore is an autogenerated mock type for the ThemeStore type
type ThemeStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *ThemeStore) Delete(id string) *model.AppError {
	ret := _m.Called(id)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(string) *model.AppError); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *ThemeStore) Get(id string) (*model.Theme, *model.AppError) {
	ret := _m.Called(id)

	var r0 *model.Theme
	if rf, ok := ret.Get(0).(func(string) *model.Theme); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Theme)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *ThemeStore) GetAll() ([]*model.Theme, *model.AppError) {
	ret := _m.Called()

	var r0 []*model.Theme
	if rf, ok := ret.Get(0).(func() []*model.Theme); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Theme)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func() *model.AppError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// Save provides a mock function with given fields: theme
func (_m *ThemeStore) Save(theme *model.Theme) (*model.Theme, *model.AppError) {
	ret := _m.Called(theme)

	var r0 *model.Theme
	if rf, ok := ret.Get(0).(func(*model.Theme) *model.Theme); ok {
		r0 = rf(theme)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Theme)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.Theme) *model.AppError); ok {
		r1 = rf(theme)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}
