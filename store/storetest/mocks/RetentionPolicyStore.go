// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost-server/v5/model"
	mock "github.com/stretchr/testify/mock"
)

// RetentionPolicyStore is an autogenerated mock type for the RetentionPolicyStore type
type RetentionPolicyStore struct {
	mock.Mock
}

// AddChannel provides a mock function with given fields: policyChannel
func (_m *RetentionPolicyStore) AddChannel(policyChannel *model.RetentionPolicyChannel) error {
	ret := _m.Called(policyChannel)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RetentionPolicyChannel) error); ok {
		r0 = rf(policyChannel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTeam provides a mock function with given fields: policyTeam
func (_m *RetentionPolicyStore) AddTeam(policyTeam *model.RetentionPolicyTeam) error {
	ret := _m.Called(policyTeam)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RetentionPolicyTeam) error); ok {
		r0 = rf(policyTeam)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *RetentionPolicyStore) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *RetentionPolicyStore) Get(id string) (*model.RetentionPolicy, error) {
	ret := _m.Called(id)

	var r0 *model.RetentionPolicy
	if rf, ok := ret.Get(0).(func(string) *model.RetentionPolicy); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RetentionPolicy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *RetentionPolicyStore) GetAll() ([]*model.RetentionPolicy, error) {
	ret := _m.Called()

	var r0 []*model.RetentionPolicy
	if rf, ok := ret.Get(0).(func() []*model.RetentionPolicy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RetentionPolicy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllWithoutTeamsOrChannels provides a mock function with given fields:
func (_m *RetentionPolicyStore) GetAllWithoutTeamsOrChannels() ([]*model.RetentionPolicy, error) {
	ret := _m.Called()

	var r0 []*model.RetentionPolicy
	if rf, ok := ret.Get(0).(func() []*model.RetentionPolicy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RetentionPolicy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveChannel provides a mock function with given fields: policyChannel
func (_m *RetentionPolicyStore) RemoveChannel(policyChannel *model.RetentionPolicyChannel) error {
	ret := _m.Called(policyChannel)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RetentionPolicyChannel) error); ok {
		r0 = rf(policyChannel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveTeam provides a mock function with given fields: policyTeam
func (_m *RetentionPolicyStore) RemoveTeam(policyTeam *model.RetentionPolicyTeam) error {
	ret := _m.Called(policyTeam)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RetentionPolicyTeam) error); ok {
		r0 = rf(policyTeam)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: policy
func (_m *RetentionPolicyStore) Save(policy *model.RetentionPolicy) (*model.RetentionPolicy, error) {
	ret := _m.Called(policy)

	var r0 *model.RetentionPolicy
	if rf, ok := ret.Get(0).(func(*model.RetentionPolicy) *model.RetentionPolicy); ok {
		r0 = rf(policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RetentionPolicy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.RetentionPolicy) error); ok {
		r1 = rf(policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: policy
func (_m *RetentionPolicyStore) Update(policy *model.RetentionPolicy) (*model.RetentionPolicy, error) {
	ret := _m.Called(policy)

	var r0 *model.RetentionPolicy
	if rf, ok := ret.Get(0).(func(*model.RetentionPolicy) *model.RetentionPolicy); ok {
		r0 = rf(policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RetentionPolicy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.RetentionPolicy) error); ok {
		r1 = rf(policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
