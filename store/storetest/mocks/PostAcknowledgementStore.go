// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost-server/v6/model"
	mock "github.com/stretchr/testify/mock"
)

// PostAcknowledgementStore is an autogenerated mock type for the PostAcknowledgementStore type
type PostAcknowledgementStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: userID, postID
func (_m *PostAcknowledgementStore) Delete(userID string, postID string) (*model.PostAcknowledgement, error) {
	ret := _m.Called(userID, postID)

	var r0 *model.PostAcknowledgement
	if rf, ok := ret.Get(0).(func(string, string) *model.PostAcknowledgement); ok {
		r0 = rf(userID, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostAcknowledgement)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: userID, postID
func (_m *PostAcknowledgementStore) Get(userID string, postID string) (*model.PostAcknowledgement, error) {
	ret := _m.Called(userID, postID)

	var r0 *model.PostAcknowledgement
	if rf, ok := ret.Get(0).(func(string, string) *model.PostAcknowledgement); ok {
		r0 = rf(userID, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostAcknowledgement)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForPost provides a mock function with given fields: postID
func (_m *PostAcknowledgementStore) GetForPost(postID string) ([]*model.PostAcknowledgement, error) {
	ret := _m.Called(postID)

	var r0 []*model.PostAcknowledgement
	if rf, ok := ret.Get(0).(func(string) []*model.PostAcknowledgement); ok {
		r0 = rf(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PostAcknowledgement)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: userID, postID
func (_m *PostAcknowledgementStore) Save(userID string, postID string) (*model.PostAcknowledgement, error) {
	ret := _m.Called(userID, postID)

	var r0 *model.PostAcknowledgement
	if rf, ok := ret.Get(0).(func(string, string) *model.PostAcknowledgement); ok {
		r0 = rf(userID, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostAcknowledgement)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
