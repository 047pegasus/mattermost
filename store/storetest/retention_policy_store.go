package storetest

import (
	"testing"

	"github.com/mattermost/mattermost-server/v5/model"
	"github.com/mattermost/mattermost-server/v5/store"
	"github.com/stretchr/testify/require"
)

func TestRetentionPolicyStore(t *testing.T, ss store.Store, s SqlStore) {
	t.Run("Save", func(t *testing.T) { testRetentionPolicyStoreSave(t, ss, s) })
	t.Run("Patch", func(t *testing.T) { testRetentionPolicyStorePatch(t, ss, s) })
}

// checkRetentionPolicyEnrichedAreEqual verifies that p1 and p2 are equal, except for their
// Id field, since that is generated by the server.
func checkRetentionPolicyEnrichedAreEqual(t *testing.T, p1, p2 *model.RetentionPolicyEnriched) {
	require.Equal(t, p1.DisplayName, p2.DisplayName)
	require.Equal(t, p1.PostDuration, p2.PostDuration)
	require.Equal(t, len(p1.Channels), len(p2.Channels))
	if p1.Channels == nil || p2.Channels == nil {
		require.Equal(t, p1.Channels, p2.Channels)
	}
	for i := range p1.Channels {
		require.Equal(t, p1.Channels[i].Id, p2.Channels[i].Id)
		require.Equal(t, p1.Channels[i].DisplayName, p2.Channels[i].DisplayName)
		require.Equal(t, p1.Channels[i].TeamDisplayName, p2.Channels[i].TeamDisplayName)
	}
	if p1.Teams == nil || p2.Teams == nil {
		require.Equal(t, p1.Teams, p2.Teams)
	}
	require.Equal(t, len(p1.Teams), len(p2.Teams))
	for i := range p1.Teams {
		require.Equal(t, p1.Teams[i].Id, p2.Teams[i].Id)
		require.Equal(t, p1.Teams[i].DisplayName, p2.Teams[i].DisplayName)
	}
}

func createTeamsAndChannelsForRetentionPolicy(t *testing.T, ss store.Store) (
	[]model.TeamDisplayInfo, []model.ChannelDisplayInfo,
) {
	team := &model.Team{
		DisplayName: "Team 1",
		Name:        "team1",
		Type:        model.TEAM_OPEN,
		Email:       MakeEmail(),
	}
	team, err := ss.Team().Save(team)
	require.Nil(t, err)
	channel := &model.Channel{
		TeamId:      team.Id,
		DisplayName: "Channel 1",
		Name:        "channel1",
		Type:        model.CHANNEL_OPEN,
	}
	channel, err = ss.Channel().Save(channel, -1)
	require.Nil(t, err)
	return []model.TeamDisplayInfo{
			{Id: team.Id, DisplayName: team.DisplayName},
		}, []model.ChannelDisplayInfo{
			{Id: channel.Id, DisplayName: channel.DisplayName, TeamDisplayName: team.DisplayName},
		}
}

func cleanupRetentionPolicyTest(s SqlStore) {
	// Manually truncate tables until testlib can handle cleanups
	s.GetMaster().Exec("TRUNCATE Channels")
	s.GetMaster().Exec("TRUNCATE Teams")
	s.GetMaster().Exec("TRUNCATE RetentionPolicies")
	s.GetMaster().Exec("TRUNCATE RetentionPoliciesChannels")
	s.GetMaster().Exec("TRUNCATE RetentionPoliciesTeams")
}

func createRetentionPolicyEnriched(displayName string, teams []model.TeamDisplayInfo,
	channels []model.ChannelDisplayInfo) *model.RetentionPolicyEnriched {
	return &model.RetentionPolicyEnriched{
		RetentionPolicy: model.RetentionPolicy{
			DisplayName:  displayName,
			PostDuration: 30,
		},
		Teams:    teams,
		Channels: channels,
	}
}

func createRetentionPolicyAppliedFromIds(displayName string, teamIds []string, channelIds []string) *model.RetentionPolicyWithApplied {
	return &model.RetentionPolicyWithApplied{
		RetentionPolicy: model.RetentionPolicy{
			DisplayName:  displayName,
			PostDuration: 30,
		},
		TeamIds:    teamIds,
		ChannelIds: channelIds,
	}
}

func createRetentionPolicyAppliedFromDisplayInfo(displayName string, teams []model.TeamDisplayInfo,
	channels []model.ChannelDisplayInfo) *model.RetentionPolicyWithApplied {
	return retentionPolicyEnrichedToApplied(
		createRetentionPolicyEnriched(displayName, teams, channels))
}

func retentionPolicyEnrichedToApplied(enriched *model.RetentionPolicyEnriched) *model.RetentionPolicyWithApplied {
	applied := &model.RetentionPolicyWithApplied{
		RetentionPolicy: enriched.RetentionPolicy,
		TeamIds:         make([]string, len(enriched.Teams)),
		ChannelIds:      make([]string, len(enriched.Channels)),
	}
	for i, team := range enriched.Teams {
		applied.TeamIds[i] = team.Id
	}
	for i, channel := range enriched.Channels {
		applied.ChannelIds[i] = channel.Id
	}
	return applied
}

func testRetentionPolicyStoreSave(t *testing.T, ss store.Store, s SqlStore) {
	teams, channels := createTeamsAndChannelsForRetentionPolicy(t, ss)
	t.Run("teams and channels are nil", func(t *testing.T) {
		proposal := createRetentionPolicyAppliedFromIds("Proposal 1", nil, nil)
		expected := createRetentionPolicyEnriched(proposal.DisplayName, []model.TeamDisplayInfo{},
			[]model.ChannelDisplayInfo{})
		newPolicy, err := ss.RetentionPolicy().Save(proposal)
		require.Nil(t, err)
		checkRetentionPolicyEnrichedAreEqual(t, expected, newPolicy)
	})
	t.Run("teams and channels are empty", func(t *testing.T) {
		proposal := createRetentionPolicyAppliedFromIds("Policy 2", []string{}, []string{})
		expected := createRetentionPolicyEnriched(proposal.DisplayName, []model.TeamDisplayInfo{},
			[]model.ChannelDisplayInfo{})
		newPolicy, err := ss.RetentionPolicy().Save(proposal)
		require.Nil(t, err)
		checkRetentionPolicyEnrichedAreEqual(t, expected, newPolicy)
	})
	t.Run("some teams and channels are specified", func(t *testing.T) {
		proposal := createRetentionPolicyAppliedFromDisplayInfo("Policy 3", teams, channels)
		expected := createRetentionPolicyEnriched(proposal.DisplayName, teams, channels)
		newPolicy, err := ss.RetentionPolicy().Save(proposal)
		require.Nil(t, err)
		checkRetentionPolicyEnrichedAreEqual(t, expected, newPolicy)
	})
	t.Run("team specified does not exist", func(t *testing.T) {
		policy := createRetentionPolicyAppliedFromIds("Policy 4", []string{"no_such_team"}, []string{})
		_, err := ss.RetentionPolicy().Save(policy)
		require.NotNil(t, err)
	})
	t.Run("channel specified does not exist", func(t *testing.T) {
		policy := createRetentionPolicyAppliedFromIds("Policy 5", []string{}, []string{"no_such_channel"})
		_, err := ss.RetentionPolicy().Save(policy)
		require.NotNil(t, err)
	})
	cleanupRetentionPolicyTest(s)
}

func testRetentionPolicyStorePatch(t *testing.T, ss store.Store, s SqlStore) {
	teams, channels := createTeamsAndChannelsForRetentionPolicy(t, ss)
	proposal := createRetentionPolicyAppliedFromDisplayInfo("Policy 1", teams, channels)
	policy, err := ss.RetentionPolicy().Save(proposal)
	require.Nil(t, err)
	t.Run("patch display name", func(t *testing.T) {
		oldDisplayName := policy.DisplayName
		policy.DisplayName = "something new"
		newPolicy, err := ss.RetentionPolicy().Patch(retentionPolicyEnrichedToApplied(policy))
		require.Nil(t, err)
		checkRetentionPolicyEnrichedAreEqual(t, policy, newPolicy)
		// restore original
		policy.DisplayName = oldDisplayName
	})
	cleanupRetentionPolicyTest(s)
}
